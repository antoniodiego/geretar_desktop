{
    "sourceFile": "src/main/java/br/com/antoniodiego/gertarefas/persist/DAOGrupos.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1751341836234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1751341836234,
            "name": "Commit-0",
            "content": "package br.com.antoniodiego.gertarefas.persist;\r\n\r\nimport br.com.antoniodiego.gertarefas.pojo.GrupoTarefas;\r\nimport br.com.antoniodiego.gertarefas.pojo.Tarefa;\r\nimport br.com.antoniodiego.gertarefas.pojo.TarefaComposta;\r\nimport br.com.antoniodiego.gertarefas.pojo.Usuario;\r\nimport br.com.antoniodiego.gertarefas.util.HibernateUtil;\r\nimport java.util.List;\r\nimport org.hibernate.Hibernate;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\n\r\n/**\r\n * Gerenciador de grupos Hibernate\r\n *\r\n * @author Ant?nio Diego\r\n */\r\n//TODO: Melhorar DO Crud pra sess√£o por app\r\npublic class DAOGrupos {\r\n\r\n    private final SessionFactory fabS;\r\n    private Usuario usu;\r\n    private HibernateUtil hu;\r\n\r\n    public DAOGrupos(HibernateUtil hu) {\r\n        fabS = hu.getSessionFactory();\r\n    }\r\n\r\n//    /**\r\n//     * Lista todos os grupos do banco\r\n//     *\r\n//     * @return\r\n//     */\r\n//    public List<GrupoTarefas> receG() {\r\n//        List<GrupoTarefas> l;\r\n//        try (Session s = fabS.openSession()) {\r\n//            s.beginTransaction();\r\n//            l = s.createQuery(\"from GrupoTarefas\").list();\r\n//            l.stream().map((o) -> (GrupoTarefas) o).map((g) -> {\r\n//                Hibernate.initialize(g.getTarefas());\r\n//                return g;\r\n//            }).forEachOrdered((g) -> {\r\n//                Hibernate.initialize(g.getSubgrupos());\r\n//            });\r\n//            s.getTransaction().commit();\r\n//        }\r\n//        return l;\r\n//    }\r\n//    /**\r\n//     * Lista todos os grupos de um usu?rio\r\n//     *\r\n//     * @return\r\n//     */\r\n//    //N]ao est? dando para criar nova tarefa em subgrupo  - CORRIGIDO \r\n//    public List<GrupoTarefas> receGU() {\r\n//        List<GrupoTarefas> l;\r\n//        try (Session s = fabS.openSession()) {\r\n//            s.beginTransaction();\r\n//            //TODO: Pai tem que ser nulo\r\n//            l = s.createQuery(\"select g from GrupoTarefas g where g.dono.nome like :nomeUsu and g.pai is null\").setParameter(\"nomeUsu\", this.usu.getNome()).list();\r\n////            l.stream().map((o) -> (GrupoTarefas) o).forEachOrdered((g) -> {\r\n////                Hibernate.initialize(g.recebeConte\\u00fado());\r\n////            });\r\n////Inicializa as tarefas dos grupos filhos da raiz\r\n//            inicializa(l);\r\n////            l.stream().map((o) -> (GrupoTarefas) o).map((g) -> {\r\n////                Hibernate.initialize(g.recebeConte\\u00fado());\r\n////                Hibernate.initialize(g.getSubgrupos());\r\n////                return g;\r\n////            }).forEachOrdered((g) -> {\r\n////                Hibernate.initialize(g.getSubgrupos());\r\n////                Hibernate.initialize(g.recebeConte\\u00fado());\r\n////            });\r\n//            s.getTransaction().commit();\r\n//        }\r\n//        return l;\r\n//    }\r\n    /**\r\n     * Inicializa tare sub e faz o mesmo com os subs\r\n     *\r\n     * @param li\r\n     */\r\n    private void inicializa(List<GrupoTarefas> li) {\r\n        li.forEach((GrupoTarefas g) -> {\r\n            //incializa tarefas do grupo\r\n            Hibernate.initialize(g.getTarefas());\r\n            //Inicializa tarefas filhas de cada tarefa comp\r\n            List<Tarefa> tarefas = g.getTarefas();\r\n            tarefas.forEach((Tarefa t) -> {\r\n                if (t instanceof TarefaComposta) {\r\n                    TarefaComposta tc = (TarefaComposta) t;\r\n                    Hibernate.initialize(tc.getTarefasFilhas());\r\n                }\r\n            });\r\n            Hibernate.initialize(g.getSubgrupos());\r\n            List<GrupoTarefas> sub = g.getSubgrupos();\r\n            inicializa(sub);\r\n        });\r\n    }\r\n\r\n    public void salvaG(GrupoTarefas g) {\r\n        try (Session s = fabS.openSession()) {\r\n            s.beginTransaction();\r\n            //TODO: Melhorar\r\n            //        g.setDono(usu);//NomeUsu(this.usu.getNome());\r\n            s.save(g);\r\n            s.getTransaction().commit();\r\n        }\r\n    }\r\n\r\n    public void atuG(GrupoTarefas g) {\r\n        try (Session s = fabS.openSession()) {\r\n            s.beginTransaction();\r\n            s.update(g);\r\n            s.getTransaction().commit();\r\n        }\r\n    }\r\n\r\n    public Usuario getUsu() {\r\n        return usu;\r\n    }\r\n\r\n    public void setUsu(Usuario usu) {\r\n        this.usu = usu;\r\n    }\r\n\r\n    public void deletaTudo(String nomeUsu) {\r\n        try (Session s = fabS.openSession()) {\r\n            s.beginTransaction();\r\n            s.createQuery(\"delete from GrupoTarefas where nomeUsu like '\" + nomeUsu + \"'\");//this.usu.getNome() + \"'\");\r\n            s.getTransaction().commit();\r\n        }\r\n    }\r\n\r\n    public void deleta(GrupoTarefas g) {\r\n        try (Session s = fabS.openSession()) {\r\n            s.beginTransaction();\r\n            s.delete(g);\r\n            s.getTransaction().commit();\r\n        }\r\n    }\r\n\r\n    public void deletaTudo(List<GrupoTarefas> grupos) {\r\n        grupos.stream().forEach((g) -> {\r\n            deleta(g);\r\n        });\r\n    }\r\n\r\n//    /**\r\n//     *\r\n//     */\r\n//    public void fazBackupB() {\r\n//        \r\n//        s.beginTransaction();\r\n//        s.createNativeQuery(\"BACKUP DATABASE TO 'copiseg/' NOT BlOCKING\").executeUpdate();\r\n//        s.getTransaction().commit();\r\n//    }\r\n}\r\n"
        }
    ]
}