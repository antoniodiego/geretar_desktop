{
    "sourceFile": "src/main/java/br/com/antoniodiego/gertarefas/util/ConversXMLD.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1751341609022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1751341609022,
            "name": "Commit-0",
            "content": "package br.com.antoniodiego.gertarefas.util;\n\nimport br.com.antoniodiego.gertarefas.pojo.GrupoTarefas;\nimport br.com.antoniodiego.gertarefas.pojo.Tarefa;\nimport br.com.antoniodiego.gertarefas.pojo.TarefaComposta;\nimport br.com.antoniodiego.gertarefas.pojo.TarefaCoordenada;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.StringWriter;\nimport java.text.ParseException;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeFormatterBuilder;\nimport java.time.format.DateTimeParseException;\nimport java.time.format.FormatStyle;\nimport java.time.temporal.TemporalAccessor;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.swing.JOptionPane;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.OutputKeys;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.w3c.dom.DOMException;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\n\n/**\n *\n * @author Ant?nio Diego- Comp:Ant?nio Diego <your.name at your.org>\n */\npublic class ConversXMLD extends ConversXML {\n\n    private final DateTimeFormatter formApeDat;\n    private final DateTimeFormatter formDatHora;\n    private String charsetEntrada;\n    private String charsetSaida;\n    private Logger logConv;\n\n    public ConversXMLD() {\n        formApeDat = DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT);//new DateTimeFormatterBuilder().appendPattern(\"dd/MM/YY\").toFormatter(Constantes.LOCAL_BR);\n        formDatHora = new DateTimeFormatterBuilder().appendPattern(\"dd/MM/YY[ kk:mm]\").toFormatter(Constantes.LOCAL_BR);\n        //Padrões\n        charsetEntrada = \"UTF-8\";\n        charsetSaida = \"UTF-8\";\n        logConv = LogManager.getLogger(\"ConvXML\");\n    }\n\n    /**\n     * Gera um documento xml a partir de uma lista de grupos\n     *\n     * @param grupos\n     * @param trs\n     * @return\n     */\n    public Document geraXMLD(List<GrupoTarefas> grupos, List<Tarefa> trs) {\n        logConv.debug(\"Início de gera XML dom\");\n        DocumentBuilderFactory fab = DocumentBuilderFactory.newInstance();\n        DocumentBuilder conD = null;\n\n        try {\n            conD = fab.newDocumentBuilder();\n        } catch (ParserConfigurationException e) {\n            e.printStackTrace();\n        }\n\n        if (conD == null) {\n            return null;\n        }\n\n        Document doc = conD.newDocument();\n\n        System.out.println(\"Gereando XML dom\");\n        try {\n            Element elraiz = doc.createElement(\"tarefas\");\n            doc.appendChild(elraiz);\n\n            GrupoTarefas g;\n            for (int i = 0; i < grupos.size(); i++) {\n                g = grupos.get(i);// (GrupoTarefas) modLG.getElementAt(i);\n                logConv.debug(\"Marshalando grupo...\");\n                Element nog = geraElNog(doc, g);\n                elraiz.appendChild(nog);\n            }\n\n            if (trs != null) {\n                System.out.println(\"Adici tare XML\");\n                logConv.debug(\"Marshalando tarefa...\");\n                trs.stream().map((t) -> geraNoTarefa(doc, t)).forEachOrdered((et) -> {\n                    elraiz.appendChild(et);\n                });\n            }\n        } catch (DOMException e) {\n            JOptionPane.showMessageDialog(null, \"Problema ao exp: \" + e.getLocalizedMessage());\n        }\n        System.out.println(\"con retor doc\");\n        return doc;\n    }\n\n    /**\n     *\n     * @param doc\n     * @param g\n     * @return\n     */\n    public Element geraElNog(Document doc, GrupoTarefas g) {\n        System.out.println(\"Gerando n? grupo\");\n\n        Element nog = doc.createElement(\"grupotarefas\");\n        Element id = doc.createElement(\"id\");\n        id.appendChild(doc.createTextNode(String.valueOf(g.getId())));\n        nog.appendChild(id);\n        Element tit = doc.createElement(\"titulo\");\n        tit.appendChild(doc.createTextNode(g.getTitulo()));\n        nog.appendChild(tit);\n\n        //Subgrupos  \n        logConv.debug(\"Marshalando subgrupos...\");\n        List<GrupoTarefas> sub = g.getSubgrupos();\n        //Aqui deveria ser necess?rio aninhar v?rios n?s grupos n? do grupo atual\n        //  Document subd = geraXMLD(sub, new ArrayList<>());\n\n        GrupoTarefas gr;\n        for (int i = 0; i < sub.size(); i++) {\n            gr = sub.get(i);// (GrupoTarefas) modLG.getElementAt(i);\n            Element nosg = geraElNog(doc, gr);\n            nog.appendChild(nosg);\n        }\n\n        //Tarefas\n        List<Tarefa> tars = g.getTarefas();\n        logConv.debug(\"Marshalando tarefas...\");\n        tars.stream().map((t) -> {\n            //TODO: Criar m?todo para criar elemento Nova tar-bot\n            Element not = geraNoTarefa(doc, t);\n\n            return not;\n        }).forEachOrdered((not) -> {\n            nog.appendChild(not);\n        });\n        return nog;\n    }\n\n    /**\n     *\n     * @param doc\n     * @param t\n     * @return\n     */\n    //TODO: TarefaComposta e Simples\n    //OBS: XXX: Problema que est dando null era por causa do coment null tarefa ntig\n    public Element geraNoTarefa(Document doc, Tarefa t) {\n        logConv.debug(\"Em geraNoTarefa\");\n        Element not;\n        TarefaComposta vc = (TarefaComposta) t;\n        not = doc.createElement(\"tarefacomposta\");\n\n        Element idT = doc.createElement(\"id\");\n        idT.appendChild(doc.createTextNode(String.valueOf(t.getId())));\n        not.appendChild(idT);\n        Element titulo = doc.createElement(\"titulo\");\n        titulo.appendChild(doc.createTextNode(t.getTitulo()));\n        not.appendChild(titulo);\n\n        Element conc = doc.createElement(\"concluida\");\n        conc.appendChild(doc.createTextNode(String.valueOf(t.isConcluida())));\n        not.appendChild(conc);\n\n        //Data conc - formato PT-BR\n        if (t.getDataConclusao() != null) {\n            System.out.println(\"data con tc: \" + formDatHora.format(t.getDataConclusao()));\n            Element dataConc = doc.createElement(\"dataconclusao\");\n            dataConc.appendChild(doc.createTextNode(t.getDataConclusao() == null ? \" \" : formDatHora.format(t.getDataConclusao())));\n            not.appendChild(dataConc);\n        }\n\n        logConv.debug(\"Gerando tag data (criação)...\");\n        Element data = doc.createElement(\"data\");\n\n        String dataF = \"\";\n\n        if (t.getDataCriacao() != null) {\n            dataF = t.getDataCriacao().format(formApeDat);\n            logConv.debug(\"Data cria. form: \" + dataF);\n        }\n        //TODO: Tentar fazer testes de unidade com gera String.v, leitura de ger\n\n        data.appendChild(doc.createTextNode(dataF));\n        not.appendChild(data);\n\n        logConv.debug(\"Adic. tag. data conc.\");\n        Element dataf = doc.createElement(\"datafazer\");\n        String dataFF = \"\";\n        if (t.getDataFazer() != null) {\n            dataFF = t.getDataFazer().format(formApeDat);\n            logConv.debug(\"Data fazer form.: \" + dataFF);\n        }\n\n        dataf.appendChild(doc.createTextNode(dataFF));\n        not.appendChild(dataf);\n\n        Element prio = doc.createElement(\"prioridade\");\n        prio.appendChild(doc.createTextNode(String.valueOf(vc.getPrioridade())));\n        not.appendChild(prio);\n\n        List<TarefaCoordenada> tarF = vc.getTarefasFilhas();\n        tarF.forEach((TarefaCoordenada filha) -> {\n            Element nof = geraNoTarC(doc, filha);\n            not.appendChild(nof);\n        });\n        return not;\n    }\n\n    public Element geraNoTarC(Document doc, TarefaCoordenada tc) {\n        Element not = doc.createElement(\"tarefacoordenada\");\n        Element conc = doc.createElement(\"concluida\");\n        conc.appendChild(doc.createTextNode(String.valueOf(tc.isConcluida())));\n        not.appendChild(conc);\n\n        //Deveria gerar com data e hora\n        if (tc.getDataConclusao() != null) {\n            System.out.println(\"dc tar cor\");\n            Element dataCon = doc.createElement(\"dataconclusao\");\n            if (tc.getDataConclusao() != null) {\n                dataCon.appendChild(doc.createTextNode(formApeDat.format(tc.getDataConclusao())));\n            } else {\n                //XXX: Obs parece nÃ£o ser bom adi ele sem filh\n                dataCon.appendChild(doc.createTextNode(\" \"));\n            }\n            not.appendChild(dataCon);\n        }\n        Element conteudo = doc.createElement(\"descricao\");\n        conteudo.appendChild(doc.createTextNode(tc.getDescricao()));\n        not.appendChild(conteudo);\n\n        if (tc.getComentario() != null) {\n            Element comentario = doc.createElement(\"comentario\");\n            comentario.appendChild(doc.createTextNode(String.valueOf(tc.getComentario())));\n            not.appendChild(comentario);\n        }\n\n        return not;\n    }\n\n    /**\n     * L? um grupo de um Node grupo. XML da minha api de impo/expo\n     *\n     * @param nogrupo\n     * @return\n     * @throws java.text.ParseException\n     */\n    public GrupoTarefas leGrupo(Node nogrupo) throws ParseException {\n        logConv.debug(\"Inic. le grupo\");\n        GrupoTarefas gl = new GrupoTarefas();\n        //TODO:Proc sub\n\n        //N?o l? o id antigo para n?o causar conflitos\n        //gl.setId(Integer.parseInt(filhos.item(0).getTextContent()));\n        logConv.debug(\"Lendo tit.\");\n        gl.setTitulo(procuraValor(\"titulo\", nogrupo));//pfilhos.item(1).getTextContent());\n\n        NodeList filhos = nogrupo.getChildNodes();\n\n        int idx = 0;\n        while (idx < filhos.getLength()) {\n            Node nt = filhos.item(idx);\n            if (nt.getNodeName().equals(\"grupotarefas\") || nt.getNodeName().equals(\"grupo\")) {\n                GrupoTarefas tf = leGrupo(nt);\n                gl.add(tf);\n            } else if (nt.getNodeName().equals(\"tarefa\") || nt.getNodeName().equals(\"tarefacomposta\")) {\n                Tarefa t = leTar(nt);\n                gl.add(t);\n            }\n            idx++;\n        }\n        logConv.debug(\"Leitura conc\");\n        //TODO: Checar se grupo já existe\n        return gl;\n    }\n\n    /**\n     * Le tarefa de n?\n     *\n     * @param nt\n     * @return\n     * @throws java.text.ParseException\n     */\n    //TODO: Simples ou comp\n    //Obs: deveria levar em conta nomes dos campos e n?o posics\n    public Tarefa leTar(Node nt) throws ParseException {\n        logConv.traceEntry();\n        logConv.debug(\"Inic letar\");\n        TarefaComposta tarX = new TarefaComposta();\n        // boolean comp = false;\n\n        if (nt.getNodeType() == Node.ELEMENT_NODE) {\n\n            //    String supId = filT.item(0).getTextContent();\n            //   System.out.println(\"sup: \" + supId);\n            //N?o por id para n?o causa conf\n            //tarX.setId(Integer.parseInt(supId));\n            tarX.setTitulo(procuraValor(\"titulo\", nt));\n\n            //TODO: Procurar Tarefas Coordenadas\n            List<TarefaCoordenada> tc = tarX.getTarefasFilhas();\n            logConv.trace(\"Procurando tar coordens...\");\n            List<Node> tarc = procuraTarCo(nt);\n\n            //Obs: primeira ? ant\n            tarc.forEach((Node no) -> {\n                //   try {\n                tc.add(leTC(no));\n//                } catch (ParseException ex) {\n//                    Logger.getLogger(ConversXMLD.class.getName()).log(Level.SEVERE, null, ex);\n//                }\n            });\n\n            logConv.trace(\"Após ler tcs\");\n\n            tarX.setConcluida(Boolean.parseBoolean(procuraValor(\"concluida\", nt)));\n            String dataCon = procuraValor(\"dataconclusao\", nt);\n            LocalDateTime dc = null;\n\n            if (dataCon != null && !dataCon.equals(\"null\") && !dataCon.isEmpty()) {\n                try {\n                    // TemporalAccessor ta = formDatHora.parse(dataCon);\n                    dc = Utilid.leD(dataCon);// LocalDateTime.from(ta);\n                } catch (NullPointerException | DateTimeParseException ex) {\n                    ex.printStackTrace();\n                    dc = null;\n                }\n            }\n\n            //Retrocomp\n            String cont = procuraValor(\"conteudo\", nt);\n\n            if (cont != null) {\n                TarefaCoordenada ant = new TarefaCoordenada(tarX.isConcluida(), dc, cont, \"\");\n                tc.add(0, ant);\n            }\n\n            System.out.println(\"Alter data con...\");\n            tarX.setDataConclusao(dc);\n\n            logConv.debug(\"Lendo data cria...\");\n            //XXX- Não lê no formato AAAA-MM-DD (No Brasil)\n            try {\n                //      if (!data.equals(\"null\")) {\n                logConv.debug(\"Procur...\");\n                String strData = procuraValor(\"data\", nt);\n\n                logConv.debug(\"Enc.: \" + strData);\n                if (strData == null) {\n                    logConv.info(\"Sem data cria.\");\n                } else {\n                    logConv.debug(\"Dividi data c. ...\");\n\n//                TemporalAccessor ta = null;\n//                try {\n//                    ta = formApeDat.parse(strData);\n//                } catch (DateTimeParseException ex) {\n//                    ex.printStackTrace();\n//                }\n                    logConv.debug(\"Config no objeto...\");\n                    LocalDate dl = null;\n\n                    try {\n                        dl = LocalDate.parse(strData, formApeDat);//from(ta);\n                        logConv.debug(\"Data dividida!\");\n                    } catch (ClassCastException ex) {\n                        logConv.debug(\"Não leu data\");\n                        ex.printStackTrace();\n                    } catch (DateTimeParseException ex) {\n                        logConv.warn(\"Falha ao interpretar data: \" + strData);\n                        ex.printStackTrace();\n                        logConv.catching(ex);\n                    }\n\n                    if (dl != null) {\n                        tarX.setDataCriacao(dl);\n                    } else {\n                        logConv.warn(\"Data nula. Config como hoje...\");\n                        tarX.setDataCriacao(LocalDate.now());\n                    }\n                    //   }\n                    logConv.debug(\"Feito.\");\n                }\n            } catch (NullPointerException ex) {\n                ex.printStackTrace();\n                logConv.error(\"Falha ao ler data cria\");\n                logConv.debug(\"Configur como nula\");\n                tarX.setDataCriacao(null);\n                JOptionPane.showMessageDialog(null, \"Erro ao ler data de criação\", \"Aviso\", JOptionPane.WARNING_MESSAGE);\n            }\n\n            try {\n                logConv.debug(\"Procur data fazer...\");\n                String strData = procuraValor(\"datafazer\", nt);\n                logConv.debug(\"Enc.: \" + strData);\n                logConv.debug(\"Dividi. ...\");\n                logConv.debug(\"Enc.: \" + strData);\n                if (strData == null) {\n                    logConv.info(\"Sem data cria.\");\n                } else {\n                    LocalDate dl = null;\n\n                    try {\n                        dl = LocalDate.parse(strData, formApeDat);//from(ta);\n                        logConv.debug(\"Data dividida!\");\n                    } catch (ClassCastException ex) {\n                        logConv.debug(\"Não leu data\");\n                        ex.printStackTrace();\n                    }catch (DateTimeParseException ex) {\n                        logConv.warn(\"Falha ao interpretar data fazer: \" + strData);\n                        //TODO: Tentar fornecer suporte data estados unid\n                        ex.printStackTrace();\n                        logConv.catching(ex);\n                    }\n\n                    logConv.debug(\"Config no objeto...\");\n                    tarX.setDataFazer(dl);\n//Obs: deve causar erro ap?s incluir camp e tent im ver ant\n//TODO: Ler tar filhas\n                }\n            } catch (NullPointerException ex) {\n                ex.printStackTrace();\n                logConv.error(\"Falha ao ler data f\");\n                tarX.setDataFazer(null);\n            }\n        }\n        return tarX;\n    }\n\n    private TemporalAccessor paraD(DateTimeFormatter f, String str) {\n        if (str == null || str.isEmpty()) {\n            return null;\n        }\n\n        try {\n            TemporalAccessor ret = f.parse(str);\n            return ret;\n        } catch (DateTimeParseException ex) {\n            return null;\n        }\n    }\n\n    /**\n     *\n     * @param no\n     * @return\n     */\n    //TODO: Tentar criar testes\n    private TarefaCoordenada leTC(Node no) {\n        logConv.debug(\"Lendo tar. coord....\");\n\n        TarefaCoordenada ret = new TarefaCoordenada();\n        ret.setConcluida(Boolean.parseBoolean(procuraValor(\"concluida\", no)));\n        logConv.debug(\"Lendo data con...\");\n        String dcon = procuraValor(\"dataconclusao\", no);\n        logConv.debug(\"Data lida: \" + dcon);\n        try {\n            if (dcon != null && !dcon.isEmpty()) {\n                logConv.debug(\"Data lida nem nula nem vazia\");\n                //  Date dc = Constantes.FORMATADOR_BR.parse(dcon);\n                //XXX: Obervar se func com data e hor\n                //XXX: OBS: Hora pode ser nula. parece ser bom sep.\n                ret.setDataConclusao(Utilid.leD(dcon));\n            } else {\n                logConv.info(\"data con vazia ou nula\");\n            }\n        } catch (NullPointerException | DateTimeParseException ex) {\n            ex.printStackTrace();\n            logConv.debug(\"Configurando data como nula\");\n            ret.setDataConclusao(null);\n        }\n        ret.setDescricao(procuraValor(\"descricao\", no));\n        ret.setComentario(procuraValor(\"comentario\", no));\n        return logConv.traceExit(ret);\n    }\n\n    /**\n     * Fil tarc\n     *\n     * @param n\n     * @return\n     */\n    private static List<Node> procuraTarCo(Node n) {\n        NodeList nf = n.getChildNodes();\n        List<Node> tcs = new ArrayList<>();\n        //OBS: prob era use tcs.size que ? = 0\n        for (int i = 0; i < nf.getLength(); i++) {\n            if (nf.item(i).getNodeName().equals(\"tarefacoordenada\")) {\n                tcs.add(nf.item(i));\n            }\n        }\n        return tcs;\n    }\n\n    private static String procuraValor(String elemento, Node no) {\n        NodeList filT = no.getChildNodes();\n        for (int i = 0; i < filT.getLength(); i++) {\n            Node n = filT.item(i);\n            if (n.getNodeName().equals(elemento)) {\n                return n.getTextContent();\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public String geraXML(List<GrupoTarefas> grs, List<Tarefa> trs) {\n        logConv.debug(\"Início de geraXML\");\n        StringWriter es = new StringWriter();\n\n        try {\n            TransformerFactory ft = TransformerFactory.newInstance();\n            Transformer tr = ft.newTransformer();\n            tr.setOutputProperty(OutputKeys.ENCODING, charsetSaida);//\"UTF-8\");\n            Document doc = geraXMLD(grs, trs);\n            //      System.out.println(\"d: \" + doc);\n            DOMSource orgd = new DOMSource(doc);\n            StreamResult rs = new StreamResult(es);\n            //         StringResult rs = new StringResult();\n            tr.transform(orgd, rs);\n\n        } catch (TransformerConfigurationException ex) {\n            logConv.catching(ex);\n        } catch (TransformerException ex) {\n            logConv.catching(ex);\n        }\n\n//        try {\n//            return sa.toString(\"UTF-8\");\n//        } catch (UnsupportedEncodingException ex) {\n//         Logger.getLogger(ConversXMLD.class.getName()).log(Level.SEVERE, null, ex);\n        return es.toString();\n        //    }\n    }\n\n//    public List<Object> leGruposETars(String xml) throws UnsupportedEncodingException {\n//        return leGrupoETars(new ByteArrayInputStream(xml.getBytes(\"UTF-8\")));\n//    }\n    /**\n     * Ret\n     *\n     * @param in\n     * @return\n     */\n    @Override\n    public List<Object> leGrupoETars(InputStream in) {\n        logConv.debug(\"Inici le gr e tars\");\n\n        List<Object> gt = new ArrayList<>();\n        DocumentBuilderFactory fcd = DocumentBuilderFactory.newInstance();\n        try {\n            DocumentBuilder cd = fcd.newDocumentBuilder();\n            //27/07/18 ~09:11\n            //Tenter ler exp xml de lan cand 1 25/06/18 -1657 com ISO-8859-1 e alguns acentos foram lidos corretamente, o que sugere que ele fora exportado nesse encoding\n            //Exportei com a versão dev (o qual estava exportando com UTF-8)  e tentei importar ainda com ISO-8859-1 e alguns caracteres fdicaram corrompidos.\n            logConv.debug(\"Preparando buffer rea ...\");\n            logConv.debug(\"Charset entr: \" + charsetEntrada);\n            BufferedReader la = new BufferedReader(new InputStreamReader(in, charsetEntrada));// \"UTF-8\"));\n            logConv.debug(\"Divid. docum...\");\n            Document doc = cd.parse(new InputSource(la));\n            logConv.debug(\"Dividido!\");\n            //   System.out.println(\"dividiu\");\n\n            //Deve ser tarefas\n            Element eleD = doc.getDocumentElement();\n            logConv.debug(\"Eled: \" + eleD.getTagName());\n            doc.getDocumentElement().normalize();\n\n            NodeList fiGroT = eleD.getChildNodes();\n\n            System.out.println(\"quant ele: \" + fiGroT.getLength());\n\n            GrupoTarefas g;\n            Tarefa ta;\n            for (int c = 0; c < fiGroT.getLength(); c++) {\n                Node n = fiGroT.item(c);\n                if (n.getNodeName().equals(\"grupotarefas\") || n.getNodeName().equals(\"grupo\")) {\n                    logConv.debug(\"Enc grupo\");\n                    g = leGrupo(n);\n                    //TODO: Checar se grupo já existe antes ad\n                    gt.add(g);\n                } else if (n.getNodeName().equals(\"tarefa\") || n.getNodeName().equals(\"tarefacomposta\")) {\n                    logConv.debug(\"Enc tarefa avul\");\n// System.out.println(\"Encontrou tarefa (avulsa) em XML\");\n                    //N? n represe n? tarefa\n                    ta = leTar(n);\n                    gt.add(ta);\n                }\n            }\n        } catch (IOException | NumberFormatException | ParserConfigurationException | DOMException | SAXException e) {\n            e.printStackTrace();\n        } catch (ParseException ex) {\n            logConv.catching(ex);\n        }\n        return gt;\n    }\n\n    public String getCharsetEntrada() {\n        return charsetEntrada;\n    }\n\n    public void setCharsetEntrada(String charsetEntrada) {\n        this.charsetEntrada = charsetEntrada;\n    }\n\n    public String getCharsetSaida() {\n        return charsetSaida;\n    }\n\n    public void setCharsetSaida(String charsetSaida) {\n        this.charsetSaida = charsetSaida;\n    }\n\n}\n"
        }
    ]
}