{
    "sourceFile": "src/main/java/br/com/antoniodiego/gertarefas/ui/modelos/ModeloArvore.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1751340800152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751341609143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,14 +4,15 @@\n  * and open the template in the editor.\n  */\n package br.com.antoniodiego.gertarefas.ui.modelos;\n \n-import br.com.antoniodiego.gertarefas.Constantes;\n import br.com.antoniodiego.gertarefas.persist.daos.DAOUsuario;\n import br.com.antoniodiego.gertarefas.pojo.GrupoTarefas;\n import br.com.antoniodiego.gertarefas.pojo.Tarefa;\n import br.com.antoniodiego.gertarefas.pojo.TarefaComposta;\n import br.com.antoniodiego.gertarefas.pojo.Usuario;\n+import br.com.antoniodiego.gertarefas.util.Constantes;\n+\n import java.util.ArrayList;\n import java.util.List;\n import javax.swing.event.TreeModelEvent;\n import javax.swing.event.TreeModelListener;\n"
                },
                {
                    "date": 1751341836189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n  * and open the template in the editor.\n  */\n package br.com.antoniodiego.gertarefas.ui.modelos;\n \n-import br.com.antoniodiego.gertarefas.persist.daos.DAOUsuario;\n+import br.com.antoniodiego.gertarefas.persist.DAOUsuario;\n import br.com.antoniodiego.gertarefas.pojo.GrupoTarefas;\n import br.com.antoniodiego.gertarefas.pojo.Tarefa;\n import br.com.antoniodiego.gertarefas.pojo.TarefaComposta;\n import br.com.antoniodiego.gertarefas.pojo.Usuario;\n"
                }
            ],
            "date": 1751340800152,
            "name": "Commit-0",
            "content": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage br.com.antoniodiego.gertarefas.ui.modelos;\n\nimport br.com.antoniodiego.gertarefas.Constantes;\nimport br.com.antoniodiego.gertarefas.persist.daos.DAOUsuario;\nimport br.com.antoniodiego.gertarefas.pojo.GrupoTarefas;\nimport br.com.antoniodiego.gertarefas.pojo.Tarefa;\nimport br.com.antoniodiego.gertarefas.pojo.TarefaComposta;\nimport br.com.antoniodiego.gertarefas.pojo.Usuario;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.event.TreeModelEvent;\nimport javax.swing.event.TreeModelListener;\nimport javax.swing.tree.TreeModel;\nimport javax.swing.tree.TreePath;\n\n/**\n *\n * @author Ant?nio Diego- Comp:Ant?nio Diego <your.name at your.org>\n */\n//Obs; Poderia guardar apenas o grupo raiz do usu\npublic class ModeloArvore implements TreeModel {\n\n    private Usuario usu;\n    private final List<TreeModelListener> lis;\n    private DAOUsuario gere;\n\n    public ModeloArvore() {\n        this(new Usuario(Constantes.NOME_USR_PADR, Constantes.SENHA_PADR.toCharArray()));\n        //    this.usu = new ;\n        //  lis = new ArrayList<>();\n    }\n\n    public ModeloArvore(Usuario usu) {\n        this.usu = usu;\n        //XXX: Simplifi com param\n        // this.gere = gere;\n        lis = new ArrayList<>();\n    }\n\n    public void iniciaGer(DAOUsuario gere) {\n        this.gere = gere;\n    }\n\n    public void insere(GrupoTarefas g, Object filho) {\n        g.add(filho);\n        fiI(g, new Object[]{filho});\n    }\n\n    public TreePath geraCam(Object g) {\n        List<Object> no = new ArrayList<>();\n        no.add(g);\n\n        GrupoTarefas pai = null;\n\n        if (g instanceof GrupoTarefas) {\n            GrupoTarefas ig = (GrupoTarefas) g;\n            pai = ig.getPai();\n            //    System.out.println(\"pai de \" + ig + \": \" + pai);\n\n        } else if (g instanceof Tarefa) {\n            Tarefa t = (Tarefa) g;\n            pai = t.getPai();\n        }\n        while (pai != null) {\n            no.add(0, pai);\n            pai = pai.getPai();\n        }\n        TreePath cam = new TreePath(no.toArray());\n        return cam;\n    }\n\n    @Override\n    public Object getRoot() {\n        //XXX: OBS: poderia ser usado um grupo principal (raiz)\n        return usu.getGrupoRaiz();//\"Tarefas\";\n    }\n\n    @Override\n    public Object getChild(Object parent, int index) {\n        //    System.out.println(\"Gc: \" + parent + \" \" + index);\n        if (parent instanceof GrupoTarefas) {\n            GrupoTarefas gr = (GrupoTarefas) parent;\n            if (index < gr.getSubgrupos().size()) {\n                return gr.getSubgrupos().get(index);\n            } else {\n                return gr.getTarefas().get(index - gr.getSubgrupos().size());\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public int getChildCount(Object parent) {\n        if (parent instanceof GrupoTarefas) {\n            GrupoTarefas gr = (GrupoTarefas) parent;\n            return gr.getSubgrupos().size() + gr.getTarefas().size();\n        }\n        return 0;\n    }\n\n    @Override\n    public boolean isLeaf(Object node) {\n        if (node instanceof TarefaComposta) {\n            return true;\n        } else if (node instanceof GrupoTarefas) {\n            GrupoTarefas gr = (GrupoTarefas) node;\n            return getChildCount(gr) == 0;\n        }\n        return false;\n    }\n\n    @Override\n    public void valueForPathChanged(TreePath path, Object newValue) {\n        //  System.out.println(path + \" \" + newValue.getClass());\n        Object el = path.getLastPathComponent();\n        if (el instanceof GrupoTarefas) {\n            GrupoTarefas g = (GrupoTarefas) el;\n            g.setTitulo((String) newValue);\n            if (g.getPai() != null) {\n                gere.flush();\n                notifAt(g.getPai(), el);\n            }\n        } else if (el instanceof TarefaComposta) {\n            TarefaComposta t = (TarefaComposta) el;\n            t.setTitulo((String) newValue);\n            if (t.getPai() != null) {\n                gere.flush();\n                notifAt(t.getPai(), el);\n            }\n        }\n    }\n\n    @Override\n    public int getIndexOfChild(Object parent, Object child) {\n        if (!(parent instanceof GrupoTarefas)) {\n            return 0;\n        }\n\n        //OBS: Parece ser bom usar uma list só para por grupo e tarefas\n        GrupoTarefas gr = (GrupoTarefas) parent;\n        int idx = gr.getSubgrupos().indexOf(child);\n        if (idx == -1) {\n            idx = gr.getTarefas().indexOf(child) + gr.getSubgrupos().size();\n        }\n        return idx;\n    }\n\n    public void remove(GrupoTarefas pai, Object filho) {\n        int indiceA = getIndexOfChild(pai, filho);\n\n        if (indiceA < 0) {\n            return;\n        }\n\n        System.out.println(\"Enc remov...\");\n\n        if (filho instanceof GrupoTarefas) {\n            GrupoTarefas f = (GrupoTarefas) filho;\n            pai.getSubgrupos().remove(f);\n//            f.setDono(null);\n            f.setPai(null);\n        } else if (filho instanceof TarefaComposta) {\n            TarefaComposta ta = (TarefaComposta) filho;\n            System.out.println(\"Remov ta\");\n            pai.remove(ta);\n        }\n\n        fiR(pai, new int[]{indiceA}, new Object[]{filho});\n    }\n\n    public void removeTudo() {\n        List<GrupoTarefas> gr = usu.getGrupoRaiz().getSubgrupos();\n        // int tam = gr.size();\n        while (!gr.isEmpty()) {\n            gr.remove(gr.get(0));\n        }\n\n        usu.getGrupoRaiz().getTarefas().clear();\n        fiSC();\n    }\n\n    private void fiR(Object pai, int[] indicesAntes, Object[] filhos) {\n        lis.forEach((TreeModelListener l) -> {\n            TreePath cam = geraCam(pai);\n            System.out.println(\"Not rem: \" + cam);\n\n            TreeModelEvent ev = new TreeModelEvent(this, cam, indicesAntes, filhos);\n            l.treeNodesRemoved(ev);\n        });\n    }\n\n    private void fiI(Object pai, Object[] filhos) {\n        int[] indices = new int[filhos.length];\n        for (int i = 0; i < filhos.length; i++) {\n            indices[i] = getIndexOfChild(pai, filhos[i]);\n        }\n\n        lis.forEach((TreeModelListener l) -> {\n            TreeModelEvent eventoInserir = new TreeModelEvent(this, geraCam(pai), indices, filhos);\n            l.treeNodesInserted(eventoInserir);\n        });\n    }\n\n    private void fiSC() {\n        lis.forEach((TreeModelListener l) -> {\n            TreeModelEvent ev = new TreeModelEvent(this, new TreePath(getRoot()));\n            l.treeStructureChanged(ev);\n        }\n        );\n    }\n\n    /**\n     * Notifca alteracão em nó\n     *\n     * @param pai\n     * @param fil\n     */\n    public void notifAt(GrupoTarefas pai, Object fil) {\n        TreeModelEvent e = new TreeModelEvent(this, geraCam(pai), new int[getIndexOfChild(pai, fil)], new Object[]{fil});\n        notEvM(e);\n    }\n//\n//    private void notEv(TreeModelEvent e) {\n//        lis.forEach((TreeModelListener l) -> {\n//            l.treeStructureChanged(e);\n//        });\n    //  }\n\n    private void notEvM(TreeModelEvent e) {\n        lis.forEach((TreeModelListener l) -> {\n            l.treeNodesChanged(e);\n        });\n    }\n\n    @Override\n    public void addTreeModelListener(TreeModelListener l) {\n        //  System.out.println(\"Adic mod: \" + l.getClass());\n        lis.add(l);\n    }\n\n    @Override\n    public void removeTreeModelListener(TreeModelListener l) {\n        lis.remove(l);\n    }\n\n    public Usuario getUsu() {\n        return usu;\n    }\n\n    public void setUsu(Usuario usu) {\n        this.usu = usu;\n        fiSC();\n    }\n\n}\n"
        }
    ]
}