{
    "sourceFile": "src/main/java/br/com/antoniodiego/gertarefas/util/Utilid.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1751340800144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751341609559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n  * and open the template in the editor.\n  */\n package br.com.antoniodiego.gertarefas.util;\n \n-import br.com.antoniodiego.gertarefas.Constantes;\n import br.com.antoniodiego.gertarefas.CriptoUtils;\n import br.com.antoniodiego.gertarefas.ui.principal.JanelaPrincipalMatisse;\n \n import static br.com.antoniodiego.gertarefas.ui.principal.paineis.PainelTabelaTarefas.LOG_PAINEL_T;\n"
                }
            ],
            "date": 1751340800144,
            "name": "Commit-0",
            "content": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage br.com.antoniodiego.gertarefas.util;\n\nimport br.com.antoniodiego.gertarefas.Constantes;\nimport br.com.antoniodiego.gertarefas.CriptoUtils;\nimport br.com.antoniodiego.gertarefas.ui.principal.JanelaPrincipalMatisse;\n\nimport static br.com.antoniodiego.gertarefas.ui.principal.paineis.PainelTabelaTarefas.LOG_PAINEL_T;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.security.NoSuchAlgorithmException;\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.ZoneId;\nimport java.time.temporal.ChronoField;\nimport java.time.temporal.TemporalAccessor;\nimport java.util.Date;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.swing.JTable;\nimport javax.swing.table.TableColumn;\nimport javax.swing.table.TableColumnModel;\nimport net.minidev.json.JSONObject;\nimport net.minidev.json.parser.JSONParser;\nimport net.minidev.json.parser.ParseException;\n\n/**\n *\n * @author Antonio\n */\npublic class Utilid {\n//\n//    public static String recHas(Usuario u) {\n//        byte[] hash = null;\n//\n//        StringBuilder in = new StringBuilder(u.getNome());\n//        in.append(u.getSenha());\n//\n//        try {\n//            hash = CriptoUtils.digest(in.toString().getBytes(), \"MD5\");\n//        } catch (NoSuchAlgorithmException e) {\n//            e.printStackTrace();\n//        }\n//\n//        String hex = CriptoUtils.byteArrayToHexString(hash);\n//        return hex;\n//    }\n\n    public static String geraEmb(String nome, char[] senha) {\n        byte[] hash = null;\n\n        StringBuilder in = new StringBuilder(nome);\n        in.append(senha);\n\n        try {\n            hash = CriptoUtils.digest(in.toString().getBytes(), \"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n\n        String hex = CriptoUtils.byteArrayToHexString(hash);\n        return hex;\n    }\n\n    private static LocalDate convertData(Date d) {\n        Instant t = d.toInstant();\n        return t.atZone(ZoneId.systemDefault()).toLocalDate();\n    }\n\n    /**\n     * ou null\n     *\n     * @param d\n     * @return\n     */\n    public static LocalDateTime leD(String d) {\n        TemporalAccessor t = Constantes.FORMATADOR_DATA_H_BR_T.parse(d);\n        LocalDate ld = LocalDate.from(t);\n        LocalTime h = null;\n        if (t.isSupported(ChronoField.HOUR_OF_DAY)) {\n            h = LocalTime.from(t);\n        }\n        return ld == null ? null : LocalDateTime.of(ld, h == null ? LocalTime.now() : h);\n    }\n\n    public static void persisteInfoTabela(JTable tabelaTarefas) {\n        TableColumnModel modelC = tabelaTarefas.\n                getColumnModel();\n        TableColumn col;\n\n        JSONObject js = new JSONObject();\n        JSONObject config;\n        for (int i = 0; i < modelC.getColumnCount(); i++) {\n            col = modelC.getColumn(i);\n\n            LOG_PAINEL_T.trace(\"Key: {}, largura: {}\", col.getIdentifier(),\n                    col.getWidth());\n            config = new JSONObject();\n            config.put(\"width\", col.getWidth());\n            config.put(\"index\", i);\n            js.put(String.valueOf(col.getIdentifier()), config);\n        }\n\n        File arquivoTam = new File(\"colunas.json\");\n        FileWriter fw;\n        try {\n            fw = new FileWriter(arquivoTam);\n            fw.append(js.toJSONString());\n            fw.flush();\n            fw.close();\n        } catch (IOException ex) {\n            Logger.getLogger(JanelaPrincipalMatisse.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n\n    public static final void carregaInfoTabela(JTable tabelaTarefas) {\n        File arquivoTam = new File(\"colunas.json\");\n        if (arquivoTam.exists()) {\n            try {\n                FileReader fr = new FileReader(arquivoTam);\n                JSONParser js = new JSONParser(JSONParser.ACCEPT_NAN);\n                Object res = js.parse(fr);\n\n                if (res instanceof JSONObject) {\n                    JSONObject jsO = (JSONObject) res;\n\n                    jsO.entrySet().forEach((e) -> {\n                        //    LOG_PAINEL_T.trace(\"Key: {}\", e.getKey());\n\n                        try {\n                            TableColumn coluna = tabelaTarefas.\n                                    getColumn(e.getKey());\n                            //    LOG_PAINEL_T.debug(\"\" + e.getKey());\n                            JSONObject config = (JSONObject) jsO.get(e.getKey());\n\n                            int width = config.\n                                    getAsNumber(\"width\").intValue();\n                            LOG_PAINEL_T.debug(\"Alterando larg coluna {} para {}\", e.getKey(), width);\n                            coluna.setPreferredWidth(width);\n                            coluna.setWidth(width);\n\n                        } catch (Exception ex) {\n                            LOG_PAINEL_T.catching(ex);\n                        }\n                        // coluna.setModelIndex(config.getAsNumber(\"index\").intValue());\n                    });\n                }\n\n                // StringBuilder leit = new StringBuilder();\n                // char[] cbuf = new char[1024];\n                // int len = 0;\n                // while ((len = fr.read(cbuf)) != -1) {\n                // leit.append(new String(cbuf, 0, len));\n                // }\n                // fr.close();\n            } catch (FileNotFoundException | ParseException ex) {\n                LOG_PAINEL_T.catching(ex);\n            }\n        }\n    }\n}\n"
        }
    ]
}