{
    "sourceFile": "src/main/java/br/com/antoniodiego/gertarefas/persist/DAOUsuario.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1751341836287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1751341836287,
            "name": "Commit-0",
            "content": "package br.com.antoniodiego.gertarefas.persist;\r\n\r\nimport br.com.antoniodiego.gertarefas.pojo.GrupoTarefas;\r\nimport br.com.antoniodiego.gertarefas.pojo.TarefaComposta;\r\nimport br.com.antoniodiego.gertarefas.pojo.Usuario;\r\nimport br.com.antoniodiego.gertarefas.util.Constantes;\r\nimport br.com.antoniodiego.gertarefas.util.HibernateUtil;\r\nimport br.com.antoniodiego.gertarefas.util.Utilid;\r\nimport java.sql.SQLException;\r\nimport java.util.EnumSet;\r\nimport java.util.List;\r\nimport org.apache.logging.log4j.LogManager;\r\nimport org.apache.logging.log4j.Logger;\r\nimport org.hibernate.Hibernate;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.Transaction;\r\nimport org.hibernate.tool.hbm2ddl.SchemaExport;\r\nimport org.hibernate.tool.schema.TargetType;\r\n\r\n/**\r\n *\r\n * @author Antonio\r\n */\r\npublic class DAOUsuario {\r\n\r\n    private final SessionFactory fabS;\r\n    private Session s;\r\n    private Logger logGereUSU;\r\n    private final HibernateUtil hu;\r\n\r\n    public DAOUsuario(HibernateUtil hu) {\r\n        this.hu = hu;\r\n        logGereUSU = LogManager.getLogger(\"DAO Usu\");\r\n        this.fabS = hu.getSessionFactory();\r\n    }\r\n\r\n    public void abresSS() {\r\n        this.s = fabS.openSession();\r\n    }\r\n\r\n    public List<Usuario> receUs() {\r\n        return null;\r\n    }\r\n\r\n    public void salva(Usuario us) {\r\n        //   try (Session s = fabS.openSession()) {\r\n        s.beginTransaction();\r\n        s.save(us);\r\n        s.getTransaction().commit();\r\n        //  }\r\n    }\r\n\r\n    public void atu(Usuario us) {\r\n        // try (Session s = fabS.openSession()) {\r\n        s.beginTransaction();\r\n        s.update(us);\r\n        s.getTransaction().commit();\r\n        //  }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param tarefa\r\n     */\r\n    public void atualiza(TarefaComposta tarefa) {\r\n        // try (Session s = fabS.openSession()) {\r\n        s.beginTransaction();\r\n        s.update(tarefa);\r\n        s.getTransaction().commit();\r\n        // }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param tarefa\r\n     */\r\n    public void salva(TarefaComposta tarefa) {\r\n        /// try (Session s = fabS.openSession()) {\r\n        s.beginTransaction();\r\n        s.save(tarefa);\r\n        s.getTransaction().commit();\r\n        // }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param grupo\r\n     */\r\n    public void salvaG(GrupoTarefas grupo) {\r\n        //try (Session s = fabS.openSession()) {\r\n        s.beginTransaction();\r\n        s.save(grupo);\r\n        s.getTransaction().commit();\r\n        // }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param g\r\n     */\r\n    public void atualiza(GrupoTarefas g) {\r\n        // try (Session s = fabS.openSession()) {\r\n        s.beginTransaction();\r\n        s.update(g);\r\n        s.getTransaction().commit();\r\n        // }\r\n    }\r\n\r\n    public void satualiza(GrupoTarefas g) {\r\n        //  try (Session s = fabS.openSession()) {\r\n        s.beginTransaction();\r\n        s.saveOrUpdate(g);\r\n        s.getTransaction().commit();\r\n        // }\r\n    }\r\n\r\n    public void dele(Usuario u) {\r\n        //  try (Session s = fabS.openSession()) {\r\n        s.beginTransaction();\r\n        s.delete(receUPorH(u.getNome(), u.getEmb()));\r\n        s.getTransaction().commit();\r\n        //  }\r\n    }\r\n\r\n    public void flush() {\r\n        //TODO: Checar se já tem berta\r\n        s.beginTransaction();\r\n        s.flush();\r\n        s.getTransaction().commit();\r\n    }\r\n\r\n    public void deletaPorNomeES(Usuario u) {\r\n        System.out.println(\"dele usu+\" + u);\r\n        System.out.println(\"tem: \" + temU(u));\r\n\r\n        Usuario rec = receUPorH(u.getNome(), u.getEmb());\r\n        System.out.println(\"Enc: \" + rec);\r\n//TODO: Pesquisar usurio por nome NatutralID\r\n        //   try (Session se = fabS.openSession()) {\r\n        s.beginTransaction();\r\n        //  se.createQuery(\"delete from Usuario u where u.nome like '\"+u.getNome()+\"' and u.emb like '\"+Utilid.recHas(u)+\"'\");\r\n        s.createNativeQuery(\"DELETE * FROM Usuario WHERE nome='\" + u.getNome() + \"' AND emb='\" + u.getEmb() + \"'\");\r\n        //TODO: excluir tars\r\n        s.getTransaction().commit();\r\n        //  }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param nome\r\n     * @param se\r\n     * @return\r\n     */\r\n    public Usuario receU(String nome, char[] se) {\r\n        Usuario ue = null;\r\n        // try (Session se = fabS.openSession()) {\r\n        s.beginTransaction();\r\n        List us = s.createQuery(\"select u from Usuario u where u.nome like '\" + nome + \"' and u.emb like '\"\r\n                + Utilid.geraEmb(nome, se) + \"'\").getResultList();\r\n        if (us.size() > 0) {\r\n            ue = (Usuario) us.get(0);\r\n           // if (ue.getGrupoRaiz() != null) {\r\n               /// logGereUSU.trace(\"inic ini de colec\");\r\n//                inicializa(ue.getGrupoRaiz().getSubgrupos());\r\n//                Hibernate.initialize(ue.getGrupoRaiz().getTarefas());\r\n               // logGereUSU.trace(\"fim de ini de colec\");\r\n          //  }\r\n        }\r\n        s.getTransaction().commit();\r\n        // }\r\n        return ue;\r\n    }\r\n\r\n    public Usuario receUPorH(String nome, String hash) {\r\n        List us;\r\n        // try (Session se = fabS.openSession()) {\r\n        s.beginTransaction();\r\n        us = s.\r\n                createQuery(\"select u from Usuario u where u.nome like '\"\r\n                        + nome + \"' and u.emb like '\" + hash + \"'\").\r\n                getResultList();\r\n        s.getTransaction().commit();\r\n        // }\r\n//TODO: pesqui um so - NaturalId\r\n        if (us.size() > 0) {\r\n            return (Usuario) us.get(0);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public boolean temU(Usuario u) {\r\n//        Session s = fabS.openSession();\r\n//        s.beginTransaction();\r\n//        List<Usuario> l = s.createNativeQuery(\"SELEC * FROM Usuario WHERE nome='\" + u.getNome() + \"'\").list();\r\n//        if (l.size() > 0) {\r\n//            return true;\r\n//        } else {\r\n//            return false;\r\n//        }\r\n        return temU(u.getNome());\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param n\r\n     * @return\r\n     */\r\n    public boolean temU(String n) {\r\n        s.beginTransaction();\r\n        Usuario u = s.byNaturalId(Usuario.class).using(\"nome\", n).getReference();\r\n        s.getTransaction().commit();\r\n\r\n        return u != null;\r\n    }\r\n\r\n    /**\r\n     * Inicializa tare sub e faz o mesmo com os subs\r\n     *\r\n     * @param li\r\n     */\r\n    private void inicializa(List<GrupoTarefas> li) {\r\n        logGereUSU.traceEntry();\r\n        Hibernate.initialize(li);\r\n        li.forEach((GrupoTarefas g) -> {\r\n            //incializa tarefas do grupo\r\n            Hibernate.initialize(g.getTarefas());\r\n            //Inicializa tarefas filhas de cada tarefa comp\r\n            List<br.com.antoniodiego.gertarefas.pojo.Tarefa> tarefas = g.getTarefas();\r\n            tarefas.forEach((br.com.antoniodiego.gertarefas.pojo.Tarefa t) -> {\r\n                if (t instanceof TarefaComposta) {\r\n                    TarefaComposta tc = (TarefaComposta) t;\r\n                    Hibernate.initialize(tc.getTarefasFilhas());\r\n                }\r\n            });\r\n            Hibernate.initialize(g.getSubgrupos());\r\n            List<GrupoTarefas> sub = g.getSubgrupos();\r\n            inicializa(sub);\r\n        });\r\n\r\n        logGereUSU.traceExit();\r\n    }\r\n\r\n    /**\r\n     * Reinicia o banco\r\n     *\r\n     * @throws SQLException\r\n     */\r\n    //XXX: Obs: não func\r\n    public void reinicia() throws SQLException {\r\n        // Configuration conf = new Configuration(smd);\r\n        SchemaExport es = new SchemaExport();\r\n        // SchemaUpdate ea = new SchemaUpdate();\r\n        // EnumSet<TargetType> en = new\r\n\r\n        es.create(EnumSet.of(TargetType.DATABASE), hu.getDm());\r\n        // String procedimento = \"DROP TABLE Transacoes\";\r\n        // try (Session se = sf.openSession()) {\r\n        // se.beginTransaction();\r\n        // se.createNativeQuery(procedimento).executeUpdate();\r\n        // se.getTransaction().commit();\r\n        // }\r\n        // se.c\r\n        // Statement pre = conexao.createStatement();\r\n        // pre.executeUpdate(procedimento);\r\n        // criaTabela();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public void fazBackupB() {\r\n        logGereUSU.traceEntry();\r\n        inicTr();\r\n        logGereUSU.trace(\"Gerando SQL backup...\");\r\n        StringBuilder cSQL = new StringBuilder(\"BACKUP DATABASE TO \");\r\n        cSQL.append(\"'\");\r\n        cSQL.append(Constantes.HOME_USU).append(Constantes.SEP_ARQ);\r\n        cSQL.append(\"copiseg\").append(Constantes.SEP_ARQ).append(\"'\");\r\n        cSQL.append(\"NOT BlOCKING\");\r\n        logGereUSU.debug(\"Geraado: \" + cSQL);\r\n        s.createNativeQuery(cSQL.toString()).executeUpdate();\r\n        s.getTransaction().commit();\r\n        logGereUSU.traceExit();\r\n    }\r\n\r\n    public Transaction inicTr() {\r\n        if (!s.getTransaction().isActive()) {\r\n            return s.beginTransaction();\r\n        } else {\r\n            //TODO: Rollba\r\n            return s.getTransaction();\r\n        }\r\n    }\r\n}\r\n"
        }
    ]
}