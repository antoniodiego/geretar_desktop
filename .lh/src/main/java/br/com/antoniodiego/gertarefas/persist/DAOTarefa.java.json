{
    "sourceFile": "src/main/java/br/com/antoniodiego/gertarefas/persist/DAOTarefa.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1751341836286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1751341836286,
            "name": "Commit-0",
            "content": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage br.com.antoniodiego.gertarefas.persist;\n\nimport br.com.antoniodiego.gertarefas.pojo.Tarefa;\nimport java.util.List;\nimport javax.persistence.RollbackException;\nimport javax.persistence.TypedQuery;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.hibernate.Session;\n\n/**\n *\n * @author Ant√¥nio Diego <antoniodiegoluz at gmail.com>\n */\npublic class DAOTarefa extends DAO {\n\n    public static final Logger LOG_DAO_T = LogManager.getLogger(\"dao_tarefas\");\n\n    public Long getMaiorIDPers() {\n        getSession().beginTransaction();\n        TypedQuery<Long> maiorId = getSession().createQuery(\"SELECT t.idPers FROM Tarefa t ORDER by t.idPers DESC\",\n                Long.class).setMaxResults(1);\n        //    NativeQuery quer = getSession().createNativeQuery(\"SELECT MAX(id_pers) AS maior_id FROM tarefas\");\n        List<Long> res = maiorId.getResultList();\n        getSession().getTransaction().commit();\n\n        LOG_DAO_T.debug(\"Enc: \" + res.size());\n\n        if (res.size() > 0) {\n            LOG_DAO_T.debug(\"Maior: \" + res.get(0));\n\n            return res.get(0);\n        } else {\n            return 0L;\n        }\n\n    }\n\n    /**\n     *\n     * @return\n     */\n    public Integer getMaiorPosicao() {\n        getSession().beginTransaction();\n        TypedQuery<Integer> maiorId = getSession().createQuery(\"SELECT t.posicao FROM Tarefa t ORDER by t.posicao DESC\", Integer.class)\n                .setMaxResults(1);\n        //    NativeQuery quer = getSession().createNativeQuery(\"SELECT MAX(id_pers) AS maior_id FROM tarefas\");\n        List<Integer> res = maiorId.getResultList();\n        getSession().getTransaction().commit();\n\n        LOG_DAO_T.debug(\"Enc: \" + res.size());\n\n        if (res.size() > 0) {\n            LOG_DAO_T.debug(\"Maior: \" + res.get(0));\n\n            return res.get(0);\n        } else {\n            return 0;\n        }\n\n    }\n\n    public List<Tarefa> listaTodas() {\n        getSession().beginTransaction();\n        TypedQuery<Tarefa> queryTarefas = getSession().\n                createQuery(\"SELECT t FROM TarefaComposta t\", Tarefa.class);\n\n        List<Tarefa> tarefas = queryTarefas.getResultList();\n\n        getSession().getTransaction().commit();\n        return tarefas;\n    }\n\n    /**\n     *\n     * @param concluida\n     * @return\n     */\n    //TODO Poderia ser bom adicionar novos estados\n    public List<Tarefa> getByConcluida(Boolean concluida) {\n        getSession().beginTransaction();\n        TypedQuery<Tarefa> queryTarefas = getSession().\n                createQuery(\"SELECT t FROM TarefaComposta t WHERE \"\n                        + \"t.concluida = :concluida\", Tarefa.class).\n                setParameter(\"concluida\", concluida);\n\n        List<Tarefa> tarefas = queryTarefas.getResultList();\n\n        getSession().getTransaction().commit();\n        return tarefas;\n    }\n\n    /**\n     *\n     * @param titulo\n     * @param concluida\n     * @return\n     */\n    //TODO Poderia ser bom adicionar novos estados\n    public List<Tarefa> getByTituloAndConcluida(String titulo, Boolean concluida) {\n        getSession().beginTransaction();\n        TypedQuery<Tarefa> queryTarefas = getSession().\n                createQuery(\"SELECT t FROM TarefaComposta t WHERE \"\n                        + \"t.concluida = :concluida AND t.titulo LIKE :titulo\", Tarefa.class).\n                setParameter(\"concluida\", concluida)\n                .setParameter(\"titulo\", \"%\" + titulo + \"%\");\n\n        List<Tarefa> tarefas = queryTarefas.getResultList();\n\n        getSession().getTransaction().commit();\n        return tarefas;\n    }\n\n    public List<Tarefa> listaTodasSemCommit() {\n        // getSession().beginTransaction();\n        TypedQuery<Tarefa> queryTarefas = getSession().\n                createQuery(\"SELECT t FROM TarefaComposta t\", Tarefa.class);\n\n        List<Tarefa> tarefas = queryTarefas.getResultList();\n\n        // getSession().getTransaction().commit();\n        return tarefas;\n    }\n\n//    public Tarefa getCarregada(Tarefa t) {\n//        getSession().beginTransaction();\n//       \n//        TypedQuery<Tarefa> queryTarefas = getSession().\n//                createQuery(\"SELECT t FROM TarefaComposta t where t.idPers = :idPers\", \n//                        Tarefa.class).setMaxResults(1);\n//        queryTarefas.setParameter(\"idPers\", idPers);\n//\n//        List<Tarefa> res = queryTarefas.getResultList();\n//        getSession().getTransaction().commit();\n//\n//        if (res.size() > 0) {\n//            Tarefa tarefa = res.get(0);\n//\n//            return tarefa;\n//        } else {\n//            return null;\n//        }\n//\n//    }\n    public Tarefa getByIdPers(Long idPers) {\n        getSession().beginTransaction();\n        TypedQuery<Tarefa> queryTarefas = getSession().\n                createQuery(\"SELECT t FROM TarefaComposta t where t.idPers = :idPers\", Tarefa.class).setMaxResults(1);\n        queryTarefas.setParameter(\"idPers\", idPers);\n\n        List<Tarefa> res = queryTarefas.getResultList();\n        getSession().getTransaction().commit();\n\n        if (res.size() > 0) {\n            Tarefa tarefa = res.get(0);\n\n            return tarefa;\n        } else {\n            return null;\n        }\n\n    }\n\n    public Tarefa getByPosicaoS(Integer posicao) {\n        TypedQuery<Tarefa> queryTarefas = getSession().\n                createQuery(\"SELECT t FROM TarefaComposta t where t.posicao = :posicao\", Tarefa.class).setMaxResults(1);\n        queryTarefas.setParameter(\"posicao\", posicao);\n\n        List<Tarefa> res = queryTarefas.getResultList();\n\n        if (!res.isEmpty()) {\n            Tarefa tarefa = res.get(0);\n\n            return tarefa;\n        } else {\n            return null;\n        }\n\n    }\n\n    public Tarefa getByPosicao(Integer posicao) {\n        if (!getSession().getTransaction().isActive()) {\n            getSession().beginTransaction();\n        }\n\n        TypedQuery<Tarefa> queryTarefas = getSession().\n                createQuery(\"SELECT t FROM TarefaComposta t where t.posicao = :posicao\", Tarefa.class).setMaxResults(1);\n        queryTarefas.setParameter(\"posicao\", posicao);\n\n        List<Tarefa> res = queryTarefas.getResultList();\n\n        getSession().getTransaction().commit();\n\n        if (res.size() > 0) {\n            Tarefa tarefa = res.get(0);\n\n            return tarefa;\n        } else {\n            return null;\n        }\n\n    }\n\n    public void exclui(Tarefa t) {\n        Session ses = getSession();\n        ses.beginTransaction();\n        ses.delete(t);\n\n        try {\n            ses.getTransaction().commit();\n        } catch (RollbackException ex) {\n            ses.getTransaction().rollback();\n        } catch (IllegalStateException ex) {\n\n        }\n    }\n}\n"
        }
    ]
}