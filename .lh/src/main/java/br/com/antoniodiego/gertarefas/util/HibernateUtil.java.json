{
    "sourceFile": "src/main/java/br/com/antoniodiego/gertarefas/util/HibernateUtil.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1751342001004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1751342001004,
            "name": "Commit-0",
            "content": "/*\n *Copyright\n * \n * \n */\npackage br.com.antoniodiego.gertarefas.util;\n\nimport br.com.antoniodiego.gertarefas.Defini;\nimport br.com.antoniodiego.gertarefas.pojo.Agendamento;\nimport br.com.antoniodiego.gertarefas.pojo.Comentario;\nimport br.com.antoniodiego.gertarefas.pojo.GrupoTarefas;\nimport br.com.antoniodiego.gertarefas.pojo.Notificacao;\nimport br.com.antoniodiego.gertarefas.pojo.Tarefa;\nimport br.com.antoniodiego.gertarefas.pojo.TarefaComposta;\nimport br.com.antoniodiego.gertarefas.pojo.Usuario;\nimport br.com.antoniodiego.gertarefas.app.Principal;\n\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\nimport org.hibernate.SessionFactory;\nimport org.hibernate.boot.Metadata;\nimport org.hibernate.boot.MetadataSources;\nimport org.hibernate.boot.registry.BootstrapServiceRegistry;\nimport org.hibernate.boot.registry.BootstrapServiceRegistryBuilder;\nimport org.hibernate.boot.registry.StandardServiceRegistry;\nimport org.hibernate.boot.registry.StandardServiceRegistryBuilder;\n\n/**\n * Hibernate Utility class with a convenient method to get Session Factory object.\n *\n * @author Antonio Diego\n */\npublic class HibernateUtil {\n\n    private final static HibernateUtil INSTANCIA = new HibernateUtil();\n    public static final String PASTA_GERETAR = \"gerente_tarefas_si\";\n    public static final String PASTA_BANCO = \"banco\";\n    public static final String NOME_BANCO = \"bancotarefas\";\n\n    private static SessionFactory sessionFactory;\n    private static BootstrapServiceRegistry bsr;\n    private static MetadataSources smd;\n    private static Metadata dm;\n    private static final Logger logUt = LogManager.getLogger(\"Util\");\n\n    public static HibernateUtil getInstance() {\n        return INSTANCIA;\n    }\n\n    /**\n     * Incializa o Hibernate\n     *\n     * @return\n     */\n    //TODO: Talv fosse bom que em caso de erro fossem feitas outras tent\n    public boolean inicia() {\n        logUt.traceEntry(\"Iniciando bootstrap do Hib\");\n\n        try {\n            // Create the SessionFactory from standard (hibernate.cfg.xml) \n            // config file.\n            logUt.trace(\"Criando bsr...\");\n            bsr = new BootstrapServiceRegistryBuilder().build();\n            StandardServiceRegistryBuilder cons\n                    = new StandardServiceRegistryBuilder(bsr);\n            cons.configure(\"hibernate.cfg.xml\");\n\n            logUt.trace(\"Subreescrevendo conf...\");\n            //Define local do banco para pasta do usu√°rio\n\n            cons.applySetting(\"hibernate.connection.url\", determinaURIBanco());\n\n            StandardServiceRegistry sr = cons.build();\n            smd = new MetadataSources(sr);\n            // smd.addAnnotatedClass(Tarefa.class);\n            smd.addAnnotatedClass(Usuario.class).\n                    addAnnotatedClass(GrupoTarefas.class);\n            smd.addAnnotatedClass(Comentario.class);\n            smd.addAnnotatedClass(Tarefa.class);\n            //Importante mapear pois se n?o n?o reconhece heran?a\n            smd.addAnnotatedClass(TarefaComposta.class);\n            //porque tarcom referenci uma entidade desco (TarSim)\n            //smd.addAnnotatedClass(TarefaSimples.class);\n\n            smd.addAnnotatedClass(Notificacao.class);\n            smd.addAnnotatedClass(Agendamento.class);\n\n            dm = smd.buildMetadata();\n            sessionFactory = dm.buildSessionFactory();\n            //sessionFactory = new BootstrapServiceRegistryBuilder().build();\n            logUt.debug(\"Final do bootstrap\");\n\n            return logUt.traceExit(true);\n        } catch (Throwable ex) {\n            // Log the exception. \n            System.err.println(\"Initial SessionFactory creation failed.\" + ex);\n            return false;\n            // throw new ExceptionInInitializerError(ex);\n        }\n    }\n\n    public static String determinaURIBanco() {\n        StringBuilder consURL = new StringBuilder(\"jdbc:hsqldb:file:\");\n        String homeU = System.getProperty(\"user.home\");\n        String pathS = System.getProperty(\"file.separator\");\n        consURL.append(homeU);\n\n        consURL.append(pathS).append(HibernateUtil.PASTA_GERETAR);\n\n        StringBuilder nomePastaBanco = new StringBuilder(\"banco\");\n\n        switch (Defini.ESTADO) {\n            case TESTE:\n                nomePastaBanco.append(\"_\").append(\"teste\");\n                break;\n            case DEBUG:\n                nomePastaBanco.append(\"_\").append(\"debug\");\n                break;\n        }\n\n        if (Principal.DESENV) {\n            nomePastaBanco.append(\"_dese\");\n        }\n\n        consURL.append(pathS).\n                append(nomePastaBanco).append(pathS).append(HibernateUtil.\n                        NOME_BANCO);\n\n        logUt.debug(\"Sep pas: \" + pathS);\n        logUt.debug(\"URL Cons: \" + consURL);\n\n        return consURL.toString();\n    }\n\n    public SessionFactory getSessionFactory() {\n        return sessionFactory;\n    }\n\n    public Metadata getDm() {\n        return dm;\n    }\n}\n"
        }
    ]
}