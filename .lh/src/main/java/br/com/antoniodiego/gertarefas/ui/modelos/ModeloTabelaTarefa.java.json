{
    "sourceFile": "src/main/java/br/com/antoniodiego/gertarefas/ui/modelos/ModeloTabelaTarefa.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1751340800150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1751340800150,
            "name": "Commit-0",
            "content": "package br.com.antoniodiego.gertarefas.ui.modelos;\n\nimport br.com.antoniodiego.gertarefas.pojo.TarefaCoordenada;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.table.AbstractTableModel;\n\n/**\n * Um modelo para exibição e edição de tarefas coordenadas\n *\n * \n * Esse não modelo é usado para exibir as tarefas na tabela que fica no centro\n * da janela principal\n * \n * Esse modelo é o br.com.antoniodiego.gertarefas.model.ModeloTabelaTarefasLista\n * \n * @author Ant?nio Diego- Comp:Ant?nio Diego <your.name at your.org>\n */\npublic class ModeloTabelaTarefa extends AbstractTableModel {\n\n    // private TarefaComposta tarefa;\n    private List<TarefaCoordenada> coords;\n    private final boolean exibicao;\n    private boolean editando;\n\n    public ModeloTabelaTarefa(boolean exib) {\n        this(new ArrayList<TarefaCoordenada>(), exib);\n    }\n\n    public ModeloTabelaTarefa(List<TarefaCoordenada> tcs, boolean exibicao) {\n        // this.tarefa = t;\n        this.coords = tcs;\n        this.exibicao = exibicao;\n    }\n\n    @Override\n    public int getRowCount() {\n        return coords.size();\n    }\n\n    @Override\n    public Class<?> getColumnClass(int columnIndex) {\n        if (exibicao) {\n            switch (columnIndex) {\n                case 0:\n                    return Boolean.class;\n                case 1:\n                    return LocalDateTime.class;\n                case 2:\n                    return LocalTime.class;\n                case 3:\n                    return String.class;\n                case 4:\n                    return String.class;\n            }\n        } else {\n            return String.class;\n        }\n        return String.class;\n    }\n\n    @Override\n    // TODO: col coment\n    public String getColumnName(int column) {\n        if (!exibicao) {\n            if (column == 0) {\n                return \"Descri\\u00e7\\u00e3o\";\n            }\n        } else {\n            switch (column) {\n                case 0:\n                    return \"Feita\";\n                case 1:\n                    return \"Data de conclus\\u00e3o\";\n                case 2:\n                    return \"Hora de conclus\\u00e3o\";\n                case 3:\n                    return \"Descri\\u00e7\\u00e3o\";\n                case 4:\n                    return \"Coment\\u00e1rio\";\n            }\n        }\n        return \"\";\n    }\n\n    @Override\n    public int getColumnCount() {\n        return exibicao ? 5 : 1;\n    }\n\n    @Override\n    public boolean isCellEditable(int rowIndex, int columnIndex) {\n        // TODO: Usar ao clic em edit\n        return !exibicao || (exibicao && editando);\n\n    }\n\n    @Override\n    public Object getValueAt(int rowIndex, int columnIndex) {\n        // TODO: linha 0 deve ser prin\n        // XXX: Parece que pode ser otimiz\n        // TarefaComposta tc = (TarefaComposta) tarefa;\n\n        // if (tc == null) {\n        // System.out.println(\"Sem tar\");\n        // return null;\n        // }\n        TarefaCoordenada tf = coords.get(rowIndex);\n        if (tf == null) {\n            // System.out.println(\"Filha li nÃ£o en\");\n            return null;\n        } else {\n            // System.out.println(\"Tem f\");\n        }\n\n        Object retorno = null;\n        if (!exibicao) {\n            // Unica col\n            retorno = tf.getDescricao();\n        } else {\n            LocalDateTime dc = tf.getDataConclusao();\n            // System.out.println(\"dc: \" + dc);\n            switch (columnIndex) {\n                case 0:\n                    retorno = tf.isConcluida();\n                    break;\n                case 1:\n                    if (dc == null) {\n                        // System.out.println(\"dc n: \" + dc);\n                        retorno = null;\n\n                    } else {\n                        retorno = dc.toLocalDate();\n                    }\n                    break;\n\n                case 2:\n                    if (dc == null) {\n                        System.out.println(\"dc n: \" + dc);\n                        retorno = null;\n\n                    } else {\n                        retorno = dc.toLocalTime();\n                    }\n\n                    break;\n                case 3:\n                    retorno = tf.getDescricao();\n                    break;\n                case 4:\n                    retorno = tf.getComentario();\n                    break;\n            }\n        }\n        return retorno;\n    }\n\n    @Override\n    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {\n        // OBS: Poderia ser bom salvar no banco durante edi??o\n        // if (tarefa instanceof TarefaComposta) {\n        // TarefaComposta tc = (TarefaComposta) tarefa;\n        if (coords.isEmpty()) {\n            return;\n        }\n        TarefaCoordenada f = coords.get(rowIndex);\n\n        if (!exibicao) {\n            f.setDescricao((String) aValue);\n        } else {\n            switch (columnIndex) {\n                case 0:\n                    f.setConcluida((Boolean) aValue);\n                    break;\n                case 1:\n                    // DeverÃ¡ ser um Date vindo do cell editor\n                    // Date nova = (Date) aValue;\n                    // Instant t = nova.toInstant();\n                    LocalDate ld = (LocalDate) aValue;// t.atZone(ZoneId.systemDefault()).toLocalDate();\n                    if (ld == null) {\n                        f.setDataConclusao(null);\n                        break;\n                    }\n                    LocalDateTime novaT = f.getDataConclusao() == null ? LocalDateTime.now().with(ld)\n                            : f.getDataConclusao().with(ld);\n                    f.setDataConclusao(novaT);\n                    break;\n                case 2:\n                    LocalTime te = (LocalTime) aValue;\n                    // Calendar c2 = Calendar.getInstance();\n                    // LocalTime elt = ni.atZone(ZoneId.systemDefault()).toLocalTime();\n                    if (te == null) {\n                        f.setDataConclusao(null);\n                        break;\n                    }\n\n                    f.setDataConclusao(\n                            f.getDataConclusao() == null ? LocalDateTime.from(te) : f.getDataConclusao().with(te));\n                    break;\n                case 3:\n                    f.setDescricao((String) aValue);\n                    break;\n                case 4:\n                    f.setComentario((String) aValue);\n                    break;\n            }\n        }\n        fireTableCellUpdated(rowIndex, columnIndex);\n        // }\n    }\n\n    public List<TarefaCoordenada> getCoords() {\n        return coords;\n    }\n\n    public void setCoords(List<TarefaCoordenada> coords) {\n        this.coords = coords;\n        fireTableDataChanged();\n    }\n\n    // public void setTarefa(TarefaComposta tarefa) {\n    // this.tarefa = tarefa;\n    // fireTableDataChanged();\n    // }\n    //\n    // public TarefaComposta getTarefa() {\n    // return tarefa;\n    // }\n    public void novaCoordenada() {\n        // if (tarefa instanceof TarefaSimples) {\n        // if (tarefa.getConteudo() instanceof List) {\n        // List tc = (List) tarefa.getConteudo();\n        // tc.add(new TarefaSimples());\n        // }\n        coords.add(new TarefaCoordenada());\n        // TODO: simp\n        fireTableRowsInserted(getRowCount() - 1, getRowCount() - 1);\n    }\n\n    public void remove(int idx) {\n        // if (tarefa.getTarefasFilhas instanceof List) {\n        // List tc = (List) tarefa.getTarefasFilhas();\n        // // tc.add(new TarefaSimples());\n        if (coords.isEmpty()) {\n            return;\n        }\n        coords.remove(idx);\n        // TODO: Del\n        fireTableRowsDeleted(idx, idx);\n        // }\n    }\n\n    public boolean isEditando() {\n        return editando;\n    }\n\n    public void setEditando(boolean editando) {\n        this.editando = editando;\n        // OBS: Achar outra forma cencelar ediçõ\n        fireTableDataChanged();\n    }\n\n    public void limpa() {\n        this.coords.clear();\n        fireTableDataChanged();\n    }\n}\n"
        }
    ]
}