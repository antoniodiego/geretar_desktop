{
    "sourceFile": "src/main/java/br/com/antoniodiego/gertarefas/controller/JanPrinMatController.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1751341419977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751341609034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,8 @@\n import org.hsqldb.HsqlException;\n import org.springframework.web.client.RestTemplate;\n import org.w3c.dom.DOMException;\n \n-import br.com.antoniodiego.gertarefas.Constantes;\n import br.com.antoniodiego.gertarefas.exportacao_backup.TransfXMLT;\n import br.com.antoniodiego.gertarefas.model.ModeloTabAgend;\n import br.com.antoniodiego.gertarefas.model.ModeloTabNotif;\n import br.com.antoniodiego.gertarefas.model.ModeloTabelaTarefasLista;\n@@ -99,8 +98,9 @@\n import br.com.antoniodiego.gertarefas.ui.modelos.ModeloData;\n import br.com.antoniodiego.gertarefas.ui.modelos.ModeloTabelaTarefa;\n import br.com.antoniodiego.gertarefas.ui.novatarefa.DialogoNovaTarView;\n import br.com.antoniodiego.gertarefas.ui.principal.paineis.PainelListaTarefas;\n+import br.com.antoniodiego.gertarefas.util.Constantes;\n import br.com.antoniodiego.gertarefas.util.ConversXML;\n import br.com.antoniodiego.gertarefas.util.ConversXMLD;\n import br.com.antoniodiego.gertarefas.util.HibernateUtil;\n import java.io.FileReader;\n"
                },
                {
                    "date": 1751341836084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,13 +78,13 @@\n import br.com.antoniodiego.gertarefas.exportacao_backup.TransfXMLT;\n import br.com.antoniodiego.gertarefas.model.ModeloTabAgend;\n import br.com.antoniodiego.gertarefas.model.ModeloTabNotif;\n import br.com.antoniodiego.gertarefas.model.ModeloTabelaTarefasLista;\n-import br.com.antoniodiego.gertarefas.persist.daos.DAOAgendamentos;\n-import br.com.antoniodiego.gertarefas.persist.daos.DAOGrupos;\n-import br.com.antoniodiego.gertarefas.persist.daos.DAONotifcacao;\n-import br.com.antoniodiego.gertarefas.persist.daos.DAOTarefa;\n-import br.com.antoniodiego.gertarefas.persist.daos.DAOUsuario;\n+import br.com.antoniodiego.gertarefas.persist.DAOAgendamentos;\n+import br.com.antoniodiego.gertarefas.persist.DAOGrupos;\n+import br.com.antoniodiego.gertarefas.persist.DAONotifcacao;\n+import br.com.antoniodiego.gertarefas.persist.DAOTarefa;\n+import br.com.antoniodiego.gertarefas.persist.DAOUsuario;\n import br.com.antoniodiego.gertarefas.pojo.Agendamento;\n import br.com.antoniodiego.gertarefas.pojo.GrupoTarefas;\n import br.com.antoniodiego.gertarefas.pojo.Notificacao;\n import br.com.antoniodiego.gertarefas.pojo.Tarefa;\n"
                },
                {
                    "date": 1751341963957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,8 +97,9 @@\n import br.com.antoniodiego.gertarefas.ui.modelos.ModeloArvore;\n import br.com.antoniodiego.gertarefas.ui.modelos.ModeloData;\n import br.com.antoniodiego.gertarefas.ui.modelos.ModeloTabelaTarefa;\n import br.com.antoniodiego.gertarefas.ui.novatarefa.DialogoNovaTarView;\n+import br.com.antoniodiego.gertarefas.ui.principal.JanelaPrincipalMatisse;\n import br.com.antoniodiego.gertarefas.ui.principal.paineis.PainelListaTarefas;\n import br.com.antoniodiego.gertarefas.util.Constantes;\n import br.com.antoniodiego.gertarefas.util.ConversXML;\n import br.com.antoniodiego.gertarefas.util.ConversXMLD;\n"
                }
            ],
            "date": 1751341419977,
            "name": "Commit-0",
            "content": "package br.com.antoniodiego.gertarefas.controller;\n\nimport static br.com.antoniodiego.gertarefas.ui.principal.paineis.PainelTabelaTarefas.LOG_PAINEL_T;\n\nimport java.awt.AWTException;\nimport java.awt.EventQueue;\nimport java.awt.MenuItem;\nimport java.awt.PopupMenu;\nimport java.awt.SystemTray;\nimport java.awt.TrayIcon;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.sql.SQLException;\nimport java.text.SimpleDateFormat;\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.ZoneOffset;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Comparator;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.logging.Level;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport javax.swing.AbstractAction;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JOptionPane;\nimport javax.swing.JTree;\nimport javax.swing.SpinnerNumberModel;\nimport javax.swing.TransferHandler;\nimport javax.swing.event.TreeModelEvent;\nimport javax.swing.event.TreeModelListener;\nimport javax.swing.event.TreeSelectionEvent;\nimport javax.swing.event.TreeSelectionListener;\nimport javax.swing.table.TableColumn;\nimport javax.swing.table.TableRowSorter;\nimport javax.swing.tree.TreePath;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.dataformat.xml.XmlMapper;\nimport com.fasterxml.jackson.datatype.hibernate5.Hibernate5Module;\nimport com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.flywaydb.core.Flyway;\nimport org.flywaydb.core.api.FlywayException;\nimport org.hsqldb.HsqlException;\nimport org.springframework.web.client.RestTemplate;\nimport org.w3c.dom.DOMException;\n\nimport br.com.antoniodiego.gertarefas.Constantes;\nimport br.com.antoniodiego.gertarefas.exportacao_backup.TransfXMLT;\nimport br.com.antoniodiego.gertarefas.model.ModeloTabAgend;\nimport br.com.antoniodiego.gertarefas.model.ModeloTabNotif;\nimport br.com.antoniodiego.gertarefas.model.ModeloTabelaTarefasLista;\nimport br.com.antoniodiego.gertarefas.persist.daos.DAOAgendamentos;\nimport br.com.antoniodiego.gertarefas.persist.daos.DAOGrupos;\nimport br.com.antoniodiego.gertarefas.persist.daos.DAONotifcacao;\nimport br.com.antoniodiego.gertarefas.persist.daos.DAOTarefa;\nimport br.com.antoniodiego.gertarefas.persist.daos.DAOUsuario;\nimport br.com.antoniodiego.gertarefas.pojo.Agendamento;\nimport br.com.antoniodiego.gertarefas.pojo.GrupoTarefas;\nimport br.com.antoniodiego.gertarefas.pojo.Notificacao;\nimport br.com.antoniodiego.gertarefas.pojo.Tarefa;\nimport br.com.antoniodiego.gertarefas.pojo.TarefaComposta;\nimport br.com.antoniodiego.gertarefas.pojo.TipoVoto;\nimport br.com.antoniodiego.gertarefas.pojo.Usuario;\nimport br.com.antoniodiego.gertarefas.pojo.Voto;\nimport br.com.antoniodiego.gertarefas.ui.confirmacoes.DialogoConfirmarExcTudo;\nimport br.com.antoniodiego.gertarefas.ui.login.TelaLogin;\nimport br.com.antoniodiego.gertarefas.ui.modelos.ModeloArvore;\nimport br.com.antoniodiego.gertarefas.ui.modelos.ModeloData;\nimport br.com.antoniodiego.gertarefas.ui.modelos.ModeloTabelaTarefa;\nimport br.com.antoniodiego.gertarefas.ui.novatarefa.DialogoNovaTarView;\nimport br.com.antoniodiego.gertarefas.ui.principal.paineis.PainelListaTarefas;\nimport br.com.antoniodiego.gertarefas.util.ConversXML;\nimport br.com.antoniodiego.gertarefas.util.ConversXMLD;\nimport br.com.antoniodiego.gertarefas.util.HibernateUtil;\nimport java.io.FileReader;\nimport net.minidev.json.JSONObject;\nimport net.minidev.json.parser.JSONParser;\nimport net.minidev.json.parser.ParseException;\n\n/**\n *\n * @author Ant�noio Diego <antoniodiegoluz at gmail.com>\n */\npublic class JanPrinMatController {\n\n    private Usuario usuario;\n    private DAOGrupos gerg;\n    private DAOUsuario daoUsuario;\n    /**\n     * Tarefa selecionada.\n     */\n    private Tarefa tarefaAEditar;\n    private File arquiP;\n    private Properties proprie;\n    /**\n     * Grupo selecionado. Da tarefa atual. Essa váriável guarda o grupo\n     * selecionado na árvore se houver um. Se não tiver um grupo, mas houver uma\n     * tarefa selecionada o pai dela é guardado no campo. Se um nó ramo que não\n     * for grupo for selecionado ela deve guardar uma ref para o nó raiz\n     */\n    private GrupoTarefas grupoDaAtu;\n    private Tarefa tarefaExibida;\n    private ModeloArvore modeloArv;\n\n    private AcaoEditarTarefa acaoEditar;\n\n    private JanelaPrincipalMatisse view;\n    private JTree arvoreTarefas;\n    public static final Logger LOG_CONTR_PRINC = LogManager.\n            getLogger(\"Controller_Principal\");\n    private AcaoBackup acaoBackup;\n    private AcaoExcluirGrupo acaoExG;\n    private AcaoRecortar acaoRec;\n    private AcaoCopiar acaoCop;\n    private AcaoColar acaoColar;\n\n    private AdicCam acaoAdic;\n\n    private JButton botaRem;\n    private AcaoReiniciar acaoReiniciarBanco;\n    private AcaoExcluirTudo acaoExT;\n\n    private AcaoAtalho acaoCriAt;\n\n    private SpinnerNumberModel modeloCampoPro;\n\n    private ModeloTabelaTarefa modeloTabela;\n    private TrayIcon iconeGeretar;\n    private int totalFaz;\n\n    private ModeloTabNotif modTabNotif;\n    JanelaPrincipalMatisse princ;\n\n    public void instanciaJanelaPrincipal() {\n        princ = new JanelaPrincipalMatisse();\n\n        princ.setController(this);\n\n        try {\n            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n                System.out.println(\"LAF: \" + info.getName());\n                if (\"Nimbus\".equals(info.getName())) {\n                    javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                    break;\n                }\n            }\n        } catch (ClassNotFoundException | InstantiationException\n                | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {\n            java.util.logging.Logger.getLogger(DialogoNovaTarView.class.\n                    getName()).log(java.util.logging.Level.SEVERE,\n                            null, ex);\n        }\n\n        File arquivoProp = new File(\"propriedades.json\");\n\n        if (arquivoProp.exists()) {\n            try {\n                Object res = null;\n\n                try (FileReader fr = new FileReader(arquivoProp)) {\n                    JSONParser js = new JSONParser(JSONParser.ACCEPT_NAN);\n                    res = js.parse(fr);\n                } catch (IOException ex) {\n                    LOG_PAINEL_T.catching(ex);\n                }\n\n                if (res instanceof JSONObject) {\n                    JSONObject jsO = (JSONObject) res;\n\n                    Number largura = jsO.getAsNumber(\"largura\");\n                    Number altura = jsO.getAsNumber(\"altura\");\n                    Number expState = jsO.getAsNumber(\"estado\");\n\n                    princ.setSize(largura.intValue(), altura.intValue());\n                    princ.setExtendedState(expState.intValue());\n\n                }\n\n            } catch (ParseException | NullPointerException ex) {\n                LOG_PAINEL_T.catching(ex);\n            }\n        }\n\n    }\n\n    public void exibeJanelaPrincipal() {\n\n        EventQueue.invokeLater(() -> {\n            // Boas práticas\n            /*Exibe a janela na EDT\n             */\n\n            LOG_CONTR_PRINC.traceEntry();\n            LOG_CONTR_PRINC.trace(\"Em run invoke later\");\n            LOG_CONTR_PRINC.trace(\"Antes setVisible\");\n\n            princ.setVisible(true);\n        });\n    }\n\n    public void inicializaSistema() {\n        //Excuta tarefa de inicialização em Thread\n        new Thread(new TarefaInicia()).start();\n    }\n\n    /**\n     * Deve fazer a inicialização do programa\n     */\n    private class TarefaInicia implements Runnable {\n\n        @Override\n        public void run() {\n            LOG_CONTR_PRINC.traceEntry();\n\n            /*\n             * Faz migração do banco\n             * \n             */\n            Flyway fw = Flyway.configure().baselineOnMigrate(true).\n                    baselineVersion(\"0\")\n                    .dataSource(HibernateUtil.determinaURIBanco(), \"SA\", \"\").\n                    load();\n\n            try {\n                fw.migrate();\n            } catch (FlywayException ex) {\n                if (ex.getCause() instanceof SQLException) {\n                    SQLException excSQL = (SQLException) ex.getCause();\n                    if (excSQL.getCause() instanceof HsqlException) {\n                        HsqlException excHSQL = (HsqlException) excSQL.\n                                getCause();\n                        LOG_CONTR_PRINC.trace(excHSQL.getErrorCode());\n                        LOG_CONTR_PRINC.trace(excHSQL.getLevel());\n                        LOG_CONTR_PRINC.trace(excHSQL.getMessage());\n                        LOG_CONTR_PRINC.trace(excHSQL.getStatementCode());\n                        LOG_CONTR_PRINC.trace(excHSQL.info);\n                    }\n                }\n                LOG_CONTR_PRINC.catching(ex);\n                try {\n                    fw.repair();\n                } catch (FlywayException ex2) {\n\n                }\n            }\n\n            /*\n             * Faz o bootstrap do Hibernate\n             *\n             */\n            HibernateUtil.getInstance().inicia();\n\n            /* Nesse ponto o sist já dev estar inc\n           * A partir daqui já deve ser possível fazer consulta do banco de dados.\n            Seria interessante poder fazer isso mexendo apenas nos models.\n             */\n            carregaTarefas();\n\n            /*\n             * Aqui deve ser bom se com com o serv de sinc\n             */ //            LOG_CONTR_PRINC.trace(\"Inici pro de sincro...\");\n            //\n            //            RestTemplate templ = new RestTemplate();\n            //\n            //            URI uriInfo = null;\n            //\n            //            try {\n            //                uriInfo = new URI(\"http://localhost:8015/sinc/info\");\n            //            } catch (URISyntaxException ex) {\n            //                java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);\n            //            }\n            //\n            //            LocalDateTime dataUlSincServ = null;\n            //            try {\n            //                dataUlSincServ = templ.getForObject(uriInfo, LocalDateTime.class);\n            //            } catch (ResourceAccessException ex) {\n            //\n            //                Throwable cause = ex.getCause();\n            //                if (cause instanceof ConnectException) {\n            //                    // Provavelmente o serv está offline\n            //                    // Obs: talvez fosse bom apenas igonorar\n            //                    // JOptionPane.showMessageDialog(view, \"Houve uma falha de comunicão com o\n            //                    // servidor\");\n            //                    LOG_CONTR_PRINC.info(\"Houve uma falha de comunicão com o servidor\");\n            //                    return;\n            //                }\n            //            }\n            //\n            //            LOG_CONTR_PRINC.debug(\"Data ul atu rec \" + dataUlSincServ);\n            //\n            //            if (dataUlSincServ == null) {\n            //                // Primeiro cl a se con. Enviar dados\n            //\n            //                HttpHeaders head = new HttpHeaders();\n            //                head.add(\"Accept\", MediaType.APPLICATION_XML_VALUE);\n            //                head.setContentType(MediaType.APPLICATION_XML);\n            //\n            //                RestTemplate reT = new RestTemplate();\n            //                //    GrupoTarefas gr = usuario.getGrupoRaiz();\n            //\n            //                List<GrupoTarefas> subG = gr.getSubgrupos();\n            //                LOG_CONTR_PRINC.trace(\"Qaunt g: \" + subG.size());\n            //                GrupoTarefas g1 = subG.get(0);\n            //                LOG_CONTR_PRINC.debug(\"Envi: \" + g1);\n            //                br.com.antoniodiego.gertarefas.pojo.Tarefa tar1 = g1.get(0);\n            //                LocalDate data = tar1.getDataCriacao();\n            //\n            //                HttpEntity<GrupoTarefas> reB = new HttpEntity<>(g1, head);\n            //\n            //                URI uriEnviaGrupo = null;\n            //\n            //                try {\n            //                    uriEnviaGrupo = new URI(\"http://localhost:8015/grupo/\");\n            //                } catch (URISyntaxException ex) {\n            //                    java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);\n            //                }\n            //\n            //                try {\n            //                    LOG_CONTR_PRINC.trace(\"Fazendo requi...\");\n            //                    GrupoTarefas gt = reT.postForObject(uriEnviaGrupo, reB, GrupoTarefas.class);\n            //\n            //                    if (gt != null) {\n            //                        LOG_CONTR_PRINC.info(\"Grupo enviado +\");\n            //                    } else {\n            //                        LOG_CONTR_PRINC.error(\"Falha no envio\");\n            //                    }\n            //                } catch (RestClientException ex) {\n            //                    ex.printStackTrace();\n            //\n            //                    if (ex instanceof HttpClientErrorException) {\n            //                        HttpClientErrorException hce = (HttpClientErrorException) ex;\n            //                        LOG_CONTR_PRINC.error(\"Corpo resp: \" + hce.getResponseBodyAsString());\n            //                    }\n            //                }\n            //            }\n        }\n    }\n\n    /**\n     * Carrega tarefas do banco e exibe na tela\n     */\n    public void carregaTarefas() {\n        DAOTarefa daoTarefa = new DAOTarefa();\n        List<Tarefa> tarefas = daoTarefa.getByConcluida(false);\n\n        princ.getPainelTarefas().getModeloTabela().setTarefas(tarefas);\n        princ.getPainelTarefas().getModeloTabela().ordena();\n        //  princ.getPainelTarefas().getRs().sort();\n\n        LOG_CONTR_PRINC.trace(tarefas.size() + \" Tarefas carregadas no\"\n                + \" modelo da tabela\");\n    }\n\n    /**\n     *\n     * @param antiga Versão antiga [atual no modelo]\n     * @param versaoNova\n     */\n    public void atualizaTarefa(Tarefa antiga, Tarefa versaoNova) {\n        //Faz tarefa ser recarregada\n\n        ModeloTabelaTarefasLista modelo = princ.getPainelTarefas()\n                .getModeloTabela();\n        int idx = modelo.getTarefas().indexOf(antiga);\n\n        modelo.getTarefas().set(idx, versaoNova);\n\n        modelo.fireTableRowsUpdated(idx, idx);\n\n    }\n\n    private void configuraIconeBandeja() {\n        if (SystemTray.isSupported()) {\n            SystemTray st = SystemTray.getSystemTray();\n            ImageIcon imageIcGer = new ImageIcon(JanelaPrincipalMatisse.class.\n                    getResource(\"/imagens/icone lapis.png\"));\n\n            iconeGeretar = new TrayIcon(imageIcGer.getImage(), \"Gerenciador de\"\n                    + \" tarefas \" + Constantes.VERS);\n\n            PopupMenu menuPopUp = new PopupMenu();\n            MenuItem sair = new MenuItem(\"Sair\");\n            sair.addActionListener((ActionEvent e) -> {\n                System.exit(0);\n            });\n\n            menuPopUp.add(sair);\n            try {\n                st.add(iconeGeretar);\n            } catch (AWTException ex) {\n                LOG_CONTR_PRINC.catching(ex);\n            }\n\n            iconeGeretar.setPopupMenu(menuPopUp);\n            iconeGeretar.addActionListener(acIconeBand);\n        }\n\n    }\n\n    /**\n     *\n     */\n    public void conf() {\n        confPainelAg();\n        confPainNotif();\n\n    }\n\n    private ActionListener acIconeBand = new ActionListener() {\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            view.setVisible(true);\n\n            buscaNotifPerdidas();\n        }\n\n        private void buscaNotifPerdidas() {\n            LOG_CONTR_PRINC.traceEntry(\"Buscando notif perd\");\n\n            try {\n                // TODO: Corrigir exc aqui\n                List<Notificacao> notifPerd = nots.stream()\n                        .filter(notif -> (notif.getHoraExibicao() != null\n                        && notif.getHoraExibicao().isBefore(LocalDateTime.now())))\n                        .filter(notif -> !notif.isFoiExibida()).collect(Collectors.toList());\n\n                modTabNotif.setNotif(notifPerd);\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n    };\n\n    private WindowAdapter ouvJane = new WindowAdapter() {\n        @Override\n        public void windowIconified(WindowEvent e) {\n            // Janela deve ter sido min\n            view.setVisible(false);\n        }\n\n        @Override\n        public void windowStateChanged(WindowEvent e) {\n            LOG_CONTR_PRINC.trace(\"Nov est: \" + e.getNewState());\n\n        }\n    };\n    /**\n     *\n     */\n    private Timer timerAlarme;\n    /**\n     * Janela nova tarefa\n     */\n    private DialogoNovaTarView dialogoNovaTarefa;\n    private TelaLogin dialogoLogin;\n    private ModeloTabelaTarefasLista modeloTab;\n\n    private TreeSelectionListener ouvSelArv = new TreeSelectionListener() {\n\n        @Override\n        public void valueChanged(TreeSelectionEvent e) {\n            LOG_CONTR_PRINC.debug(\"Evento de seleção\");\n            // DefaultMutableTreeNode sel = (DefaultMutableTreeNode) arvoreTarefas.\n            // getLastSelectedPathComponent();\n\n            Object sel = arvoreTarefas.getLastSelectedPathComponent();\n            if (sel == null) {\n                LOG_CONTR_PRINC.debug(\"Seleção nula\");\n                grupoDaAtu = null;\n                tarefaExibida = null;\n//                atualizaExibicaoTarefa(null);\n                acaoEditar.setEnabled(false);\n                return;\n            }\n\n            // Verifica se o nó selecionado é folha ou não\n            if (modeloArv.isLeaf(sel)) {\n                // Aqui um nó folha foi selecionado\n\n                LOG_CONTR_PRINC.debug(\"No folha\");\n                // Tarefa ou grupo vazio\n                if (sel instanceof Tarefa) {\n                    LOG_CONTR_PRINC.debug(\"Folha tarefa\");\n                    Tarefa t = (Tarefa) sel;// (Tarefa) sel.getUserObject();\n                    LOG_CONTR_PRINC.debug(\"Tit: \" + t.getTitulo());\n                    // Pela organ deve ser GrupTa\n\n                    // OBS: Linhas poderia estar em um método\n                    GrupoTarefas g = (GrupoTarefas) t.getPai();\n                    grupoDaAtu = g;\n                    // } else {\n                    // grupoDaAtu = null;\n                    // }\n                    // this.noGrupo = grupoPai;\n                    tarefaExibida = t;\n//                    atualizaExibicaoTarefa(t);\n                    acaoEditar.setEnabled(true);\n                } else if (sel instanceof GrupoTarefas) {\n                    LOG_CONTR_PRINC.debug(\"Grupo folha!\");\n                    // noGrupo = sel;\n                    grupoDaAtu = (GrupoTarefas) sel;\n//                    atualizaExibicaoTarefa(null);\n                    LOG_CONTR_PRINC.debug(\"Nome: \" + grupoDaAtu);\n                } else {\n                    LOG_CONTR_PRINC.debug(\"N? folha n?o GrupoTarefas nem Tar\");\n                    // XXX: Obs: pode ser no raiz\n                }\n            } else {\n                // Não foi um nó folha que foi escolhido.\n                // Deve ser g\n\n                if (sel instanceof GrupoTarefas) {\n                    // System.out.println(\"Sel grupo ramo: \" + sel);\n\n                    grupoDaAtu = (GrupoTarefas) sel;\n//                    atualizaExibicaoTarefa(null);\n                } else {\n                    /*\n                     * Neste ponto um nó ramo foi selecionado, mas que não foi um grupo\n                     * \n                     */\n                    System.out.println(\"N? ramo n?o GrupoTarefas nem no Princ\");\n                    // XXX: Obs: pode ser no raiz\n                    grupoDaAtu = usuario.getGrupoRaiz();\n                }\n            }\n\n//            atualizaEstadoDosMenusBotoes();\n        }\n    };\n\n    private TreeModelListener listMod = new TreeModelListener() {\n        @Override\n        public void treeNodesChanged(TreeModelEvent e) {\n            Object[] filAlt = e.getChildren();\n            Object fi1 = filAlt[0];\n            if (fi1 == tarefaExibida) {\n                // Alterada aponta para a mesma que está send exib\n//                atualizaExibicaoTarefa((Tarefa) fi1);\n            }\n        }\n\n        @Override\n        public void treeNodesInserted(TreeModelEvent e) {\n\n        }\n\n        @Override\n        public void treeNodesRemoved(TreeModelEvent e) {\n\n        }\n\n        @Override\n        public void treeStructureChanged(TreeModelEvent e) {\n\n        }\n    };\n    private ModeloData modeloCDataConc;\n\n    private Icon iconeAdicionarGrupo;\n    private TableRowSorter ordenadorTabelaLista;\n    private ModeloData modeloCData;\n    private ModeloData modeloCDataFaz;\n    private ModeloData modeloCDataAl;\n\n    private ModeloTabAgend modAg;\n    private List<Notificacao> nots;\n    private String arquivoEs;\n\n    /**\n     * O id da próxima tarefa a ser registrada\n     */\n    private Long proximoId;\n\n    public AcaoReiniciar getAcaoReiniciarBanco() {\n        if (acaoReiniciarBanco == null) {\n            acaoReiniciarBanco = new AcaoReiniciar();\n        }\n        return acaoReiniciarBanco;\n    }\n\n    private class AcaoVotoLembrei extends AbstractAction {\n\n        public AcaoVotoLembrei() {\n            super(\"Lembrei\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            tarefaExibida.aumentaPrio();\n            tarefaExibida.setDataModif(LocalDateTime.now());\n            ordenadorTabelaLista.sort();\n        }\n    }\n\n    private void confPainelTarefasLista() {\n        /*\n         * Modelo da tabela para exib tarefas em form de lista\n         */\n\n    }\n\n    // private PainelAgController contrPA;\n    private void confPainelAg() {\n        modAg = new ModeloTabAgend();\n\n    }\n\n    private void confPainNotif() {\n        modTabNotif = new ModeloTabNotif();\n\n    }\n\n    private TableColumn colunaHora;\n    private TableColumn colD;\n\n    private class AcaoVotProc extends AbstractAction {\n\n        public AcaoVotProc() {\n            super(\"Proclastinei\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            if (tarefaExibida != null) {\n                Voto votoPro = new Voto(TipoVoto.Proclastinei);\n                tarefaExibida.getVotos().add(votoPro);\n                tarefaExibida.aumentaPrio();\n                ordenadorTabelaLista.sort();\n                daoUsuario.flush();\n            }\n        }\n    }\n\n    public TableColumn getColunaHora() {\n        return colunaHora;\n    }\n\n    public TableColumn getColD() {\n        return colD;\n    }\n\n    private void ordenaGrupos() {\n        LOG_CONTR_PRINC.traceEntry();\n        GrupoTarefas gRaiz = usuario.getGrupoRaiz();\n\n        // Ordena grupos\n        ordenaGrupo(gRaiz);\n        // List<Tarefa> lT = gRaiz.getTarefas();\n        // ComparaTarPrio comparadorPrio = new ComparaTarPrio();\n        // lT.sort(comparadorPrio);\n        //\n        // List<GrupoTarefas> subGrupos = gRaiz.getSubgrupos();\n        // subGrupos.forEach((grupo) -> {\n        // grupo.getTarefas().sort(comparadorPrio);\n        //\n        // });;\n    }\n\n    // =========== Ações ============\n    public class AcaoReiniciar extends AbstractAction {\n\n        public AcaoReiniciar() {\n            super(\"Reiniciar banco\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            try {\n                daoUsuario.reinicia();\n                carregaUsuarioEDados();\n                // TODO: Atualizar tab. rec usu\n            } catch (SQLException ex) {\n                LOG_CONTR_PRINC.catching(ex);\n            }\n            System.out.println(\"Reiniciou banco!\");\n            // TODO: Exib JOpP\n        }\n    }\n\n    public ModeloArvore getModeloArv() {\n        return modeloArv;\n    }\n\n    public ModeloTabelaTarefa getModeloTabela() {\n        return modeloTabela;\n    }\n\n    public ModeloTabelaTarefasLista getModeloTab() {\n        return modeloTab;\n    }\n\n    private class AcaoEditarTarefa extends AbstractAction {\n\n        public AcaoEditarTarefa() {\n            super(\"Editar\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            if (tarefaExibida == null) {\n                return;\n            }\n            tarefaAEditar = tarefaExibida;\n            // TODO: Btch estdo campos\n            modeloTabela.setEditando(true);\n            // PENDING: Desabilitar outros se for nec\n\n        }\n    }\n\n    /**\n     *\n     */\n    private void carregaUsuarioEDados() {\n        LOG_CONTR_PRINC.traceEntry(\"Carr dados\");\n        // Verfiica sessoes salvas\n        if (proprie.getProperty(\"manter\", \"false\").equalsIgnoreCase(\"true\")) {\n            // Sess?o salva\n            LOG_CONTR_PRINC.trace(\"Manter estava em prop!\");\n\n            String nomeUsuarioSalvo = proprie.getProperty(\"usuario\");\n            String hash = proprie.getProperty(\"hash\");\n\n            usuario = daoUsuario.receUPorH(nomeUsuarioSalvo, hash);\n\n            gerg.setUsu(usuario);\n\n            exibeGrupos();\n        } else if (proprie.getProperty(\"exibirin\", \"false\").equalsIgnoreCase(\"true\")) {\n            // N?o tem sess?o e atividao login no in?cio.\n            LOG_CONTR_PRINC.trace(\"Exibindo tela login\");\n            dialogoLogin.setModal(true);\n            permiss\\u00e3oECarrega();\n        } else {\n            // N?o tem sess?o e nem atividao login no in?cio.\n            LOG_CONTR_PRINC.trace(\"dir carr\");\n            // Procura usu?rio padr?o\n            // Obs: Parece que apenas o nome bastaria (id)\n            // OBS: anal load e get e refresh\n            LOG_CONTR_PRINC.trace(\"Procurando usu pad\");\n            Usuario padr\\u00e3o = daoUsuario.receU(Constantes.NOME_USR_PADR, Constantes.SENHA_PADR.toCharArray());\n            LOG_CONTR_PRINC.trace(\"Busca conc\");\n\n            // Salva usu?rio pad?ro se n?o existir\n            if (padr\\u00e3o == null) {\n                // gereu.receU(padr\\u00e3o.getNome(), padr\\u00e3o.getSenha()) == null) {\n                // if (!bl.setVisible(true)\n                /* ;ancoDadosUsu?rio.temUsu?rio(padr?o)) { */\n                LOG_CONTR_PRINC.trace(\"N?o encontrou usu?rio padr?o!.\" + \" Salvando...\");\n                padr\\u00e3o = new Usuario(Constantes.NOME_USR_PADR, Constantes.SENHA_PADR.toCharArray());\n                daoUsuario.salva(padr\\u00e3o);\n            } else {\n                // XXX: Tem us mesmo após reiniciar banco\n                LOG_CONTR_PRINC.trace(\"Tem usr padrao.\");\n            }\n\n            setUsuario(padr\\u00e3o);\n            /*\n             * At? aqui os grupos (e tarefas) do usu?rio padr?o j? dever?o ter sido\n             * carregadas\n             */\n\n            carregaNotificacoes();\n\n            carregaAgendamentos();\n\n            exibeGrupos();\n        }\n\n    }\n\n    private void carregaNotificacoes() {\n        LOG_CONTR_PRINC.traceEntry();\n        DAONotifcacao daoN = new DAONotifcacao();\n\n        nots = daoN.getAll();\n\n        LOG_CONTR_PRINC.debug(\"Enc: \" + nots.size());\n\n        nots.forEach((not) -> {\n            confDespNot(not);\n        });\n\n        LOG_CONTR_PRINC.traceExit();\n    }\n\n    private void confDespNot(Notificacao not) {\n        LocalDateTime horaN = not.getHoraExibicao();\n\n        LOG_CONTR_PRINC.debug(\"Hora enc: \" + horaN);\n\n        LocalDateTime agora = LocalDateTime.now();\n\n        if (horaN.isAfter(agora)) {\n            LOG_CONTR_PRINC.debug(\"É depois de ag\");\n            Instant ins = horaN.toInstant(ZoneOffset.of(\"-3\"));\n\n            Date dataNot = Date.from(ins);\n\n            TimerTask tarefaAl = new TimerTask() {\n                @Override\n                public void run() {\n                    LOG_CONTR_PRINC.trace(\"Exib mens\");\n                    iconeGeretar.displayMessage(\"Tarefa\", not.getTarefaMae().getTitulo(), TrayIcon.MessageType.WARNING);\n\n                    JOptionPane.showMessageDialog(view, not.getTarefaMae().getTitulo(), \"Tarefa\",\n                            JOptionPane.INFORMATION_MESSAGE);\n\n                    not.setFoiExibida(true);\n                }\n            };\n\n            SimpleDateFormat formData = new SimpleDateFormat(\"dd/MM/yyyy kk:mm:ss\");\n            System.out.println(formData.format(dataNot));\n            timerAlarme.schedule(tarefaAl, dataNot);\n            LOG_CONTR_PRINC.debug(\"Da c: \" + dataNot);\n            LOG_CONTR_PRINC.debug(\"Da conf: \" + horaN);\n            LOG_CONTR_PRINC.trace(\"Tar age! \");\n        }\n    }\n\n    private void carregaAgendamentos() {\n        DAOAgendamentos daAg = new DAOAgendamentos();\n        List<Agendamento> agen = daAg.getAll();\n        modAg.setAg(agen);\n    }\n\n//    /**\n//     * Faz a conexao e carregamento dos dados do banco\n//     */\n//    public void inicializa() {\n//        LOG_CONTR_PRINC.traceEntry(\"Inicando Thread de inic\");\n//        Thread th = new Thread(new TarefaInicia());\n//       th.start();\n//    }\n    /**\n     * Sincroniza com backend\n     */\n    private class AcaoSincronizar extends AbstractAction {\n\n        private final CloseableHttpClient cliente = HttpClients.createDefault();\n        private static final String URL_POST = \"http://localhost:8006/grupos/\";\n\n        public AcaoSincronizar() {\n            super(\"Sincronizar\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            LOG_CONTR_PRINC.traceEntry();\n            LOG_CONTR_PRINC.trace(\"Inici pro de sincro...\");\n\n            RestTemplate templ = new RestTemplate();\n\n            URI uriInfo = null;\n\n            try {\n                uriInfo = new URI(\"http://localhost:8015/sinc/info\");\n            } catch (URISyntaxException ex) {\n//                java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);\n            }\n\n            LocalDateTime dataUlSincServ = templ.getForObject(uriInfo, LocalDateTime.class);\n\n            LOG_CONTR_PRINC.debug(\"Data ul atu rec \" + dataUlSincServ);\n\n        }\n    }\n    // ====== Fim das acões====== //\n\n    public Properties getProp() {\n        return this.proprie;\n    }\n\n    public DAOUsuario getDaoUsuario() {\n        return daoUsuario;\n    }\n\n    public Timer getTimerAlarme() {\n        return timerAlarme;\n    }\n\n    public void ordenaGrupo(GrupoTarefas grupo) {\n        /*\n         * Primeiro deve ser bom ordenar as tarefas do grupo e dos subgrupos. Depois\n         * disso os subgrupos poderão ser orde- nados\n         */\n\n        List<Tarefa> lT = grupo.getTarefas();\n        ComparaTarPrio comparadorPrio = new ComparaTarPrio();\n        lT.sort(comparadorPrio);\n\n        List<GrupoTarefas> subGrupos = grupo.getSubgrupos();\n        // for(gf:subGrupos){\n        //\n        // }\n        subGrupos.forEach((grupoF) -> {\n            grupoF.getTarefas().sort(comparadorPrio);\n\n            // Quando o grupo não tiver mais subgrupos esse método não será invocado\n            ordenaGrupo(grupoF);\n        });\n\n        // Nesse ponto deve poder ser admitido que os subgrupos deste deve estar com as\n        // tarefas e a list de sub ord\n        subGrupos.sort(new ComparaGruposPrio());\n    }\n\n    /**\n     * Ordena tarefas do grupo e de seus subgrupos\n     *\n     * Por que esse método é importante ?\n     *\n     * @param grupo\n     */\n    public void ordenaTarefas(GrupoTarefas grupo) {\n        List<Tarefa> lT = grupo.getTarefas();\n        ComparaTarPrio comparadorPrio = new ComparaTarPrio();\n        lT.sort(comparadorPrio);\n\n        List<GrupoTarefas> subGrupos = grupo.getSubgrupos();\n        subGrupos.forEach((grupoF) -> {\n            grupoF.getTarefas().sort(comparadorPrio);\n\n            ordenaGrupo(grupo);\n        });\n\n    }\n\n    /**\n     *\n     */\n    public void iniciaGrupoRaiz() {\n        GrupoTarefas gr = usuario.getGrupoRaiz();\n        if (gr == null) {\n            System.out.println(\"Não tem gru ra\");\n            usuario.setGrupoRaiz(new GrupoTarefas(\"Tarefas\"));\n            gerg.salvaG(usuario.getGrupoRaiz());\n        }\n    }\n\n    /**\n     * Atualiza conte\\u00eddo da janela de acordo com os grupos e tarefas\n     * existentes no banco.\n     */\n    public void exibeGrupos() {\n        iniciaGrupoRaiz();\n\n    }\n\n    public void ordenaTarefas() {\n        LOG_CONTR_PRINC.traceEntry();\n        GrupoTarefas gRaiz = usuario.getGrupoRaiz();\n\n        // Ordena tarefas\n        List<Tarefa> lT = gRaiz.getTarefas();\n        ComparaTarPrio comparadorPrio = new ComparaTarPrio();\n        lT.sort(comparadorPrio);\n\n        List<GrupoTarefas> subGrupos = gRaiz.getSubgrupos();\n        subGrupos.forEach((grupo) -> {\n            grupo.getTarefas().sort(comparadorPrio);\n        });\n    }\n\n    /**\n     * Aqui o usuário que fez login é definido no sistema. Nesse momento os\n     * grupos e tarefas dele são exi na árvore\n     *\n     * @param usuario\n     */\n    public void setUsuario(Usuario usuario) {\n        LOG_CONTR_PRINC.traceEntry();\n        this.usuario = usuario;\n        // Impor disp fir strut chan depois\n        ordenaTarefas();\n        ordenaGrupos();\n        passaDadosParaArv(usuario);\n\n        preencheATabela();\n\n        this.gerg.setUsu(usuario);\n\n        DAOTarefa daoT = new DAOTarefa();\n        Long maiorId = daoT.getMaiorIDPers();\n\n        this.proximoId = maiorId++;\n\n        LOG_CONTR_PRINC.debug(\"Próx id: \" + proximoId);\n\n        LOG_CONTR_PRINC.traceExit();\n    }\n\n    /**\n     * Nesse método as tarefas são carregadas do banco\n     */\n    private void preencheATabela() {\n        // Aqui deve ser bom dar com de preench tab\n\n        List<Tarefa> todasAsTarefas = obtemTodasAsTar();\n        LOG_CONTR_PRINC.info(\"Qaunt de tarefas ob: \" + todasAsTarefas.size());\n        todasAsTarefas.sort(new ComparaTarPrio());\n        modeloTab.setTarefas(todasAsTarefas);\n    }\n\n    private List<Tarefa> obtemTodasAsTar() {\n        List<Tarefa> todasAsTarefas = new ArrayList<>();\n        GrupoTarefas gRaiz = usuario.getGrupoRaiz();\n        copiaTarefas(gRaiz, todasAsTarefas);\n\n        return todasAsTarefas;\n    }\n\n    private void passaDadosParaArv(Usuario usu) {\n        LOG_CONTR_PRINC.traceEntry();\n        modeloArv.setUsu(usu);\n        LOG_CONTR_PRINC.traceExit();\n    }\n\n    public void gravaProp() throws FileNotFoundException, IOException {\n        try (FileOutputStream sai = new FileOutputStream(arquiP)) {\n            this.proprie.store(sai, \"arqu conf\");\n        }\n    }\n\n    private class GereTransLista extends TransferHandler {\n\n        private static final long serialVersionUID = -7220352246768596588L;\n\n        /**\n         * Cont?m os grupos que foram arrastados\n         */\n        private TreePath[] selecoesMovi;\n\n        @Override\n        public int getSourceActions(JComponent c) {\n            return COPY_OR_MOVE;\n        }\n\n        @Override\n        public boolean importData(TransferHandler.TransferSupport t) {\n            System.out.println(\"Importando...\");\n\n            Transferable tr = t.getTransferable();\n            JTree.DropLocation ld;\n            TreePath caminhoD;\n            GrupoTarefas grupInserir;\n            // DefaultMutableTreeNode noGrin = null;\n\n            if (t.isDrop()) {\n                System.out.println(\"É soltar\");\n                // ? um ato de soltar\n                ld = (JTree.DropLocation) t.getDropLocation();\n                // Cam sel\n                caminhoD = ld.getPath();\n            } else {\n                // Acho que seria colar\n                // TODO: Implementar colar\n                System.out.println(\"Não é soltar\");\n                // Prim sel\n                caminhoD = arvoreTarefas.getSelectionPath();\n            }\n\n            Object sel = caminhoD.getLastPathComponent();// PathComponent(indF);\n            // System.out.println(\"No ult cam: \" + noIn);\n            // Object obU = noIn.getUserObject();\n            System.out.println(\"Locl drop: \" + sel);\n\n            if (sel instanceof GrupoTarefas) {\n                System.out.println(\"Soltar em GrupoTarefas. Correto!\");\n                grupInserir = (GrupoTarefas) sel;\n                // noGrin = noIn;\n            } // else if (noIn.equals(noPrinc)) {\n            // System.out.println(\"Soltando em raiz\");\n            // grupInserir = null;\n            // }\n            else {\n                System.out.println(\"Não esta soltand em grupo\");\n                return false;\n            }\n\n            if (tr.isDataFlavorSupported(Tarefa.TAREFA_FLAVOR)) {\n                System.out.println(\"Imp Tarefa fla\");\n                Tarefa im = null;\n                try {\n                    im = (Tarefa) t.getTransferable().getTransferData(Tarefa.TAREFA_FLAVOR);\n                } catch (UnsupportedFlavorException | IOException e1) {\n\n                }\n                if (im != null && t.isDrop()) {\n                    // if (grupInserir != null) {\n                    grupInserir.add(im);\n                    /// daoUsuario.flush();\n                    // }\n                }\n                // TODO: Recuperar apagada\n            } else if (tr.isDataFlavorSupported(br.com.antoniodiego.gertarefas.Tarefa.SABOR_TAREFA_AN)) {\n                // System.out.println(\"Antiga\");\n                // TODO: Estudar retrocompatbi e DnD (Falvor)\n                br.com.antoniodiego.gertarefas.Tarefa tarA;\n                try {\n                    tarA = (br.com.antoniodiego.gertarefas.Tarefa) tr\n                            .getTransferData(br.com.antoniodiego.gertarefas.Tarefa.SABOR_TAREFA_AN);\n                    TarefaComposta tareN = new TarefaComposta();\n                    tareN.setTitulo(tarA.getTitulo());\n                    tareN.getTarefasFilhas();\n                    tareN.setConcluida(tarA.isConcluida());\n\n                    tareN.setDataCriacao(convertData(tarA.getData()));\n                    tareN.setDataFazer(convertData(tarA.getDataFazer()));\n                    if (t.isDrop()) {\n                        // if (grupInserir != null) {\n                        grupInserir.add(tareN);\n                        // } else {\n                        // TODO: Raiz\n                        // }\n                    }\n                } catch (UnsupportedFlavorException | IOException ex) {\n                    LOG_CONTR_PRINC.catching(ex);\n                }\n            } else if (tr.isDataFlavorSupported(DataFlavor.stringFlavor)) {\n                System.out.println(\"Recebeu string transf\");\n                // Recebeu uma string que pode ser xml\n                String strX;\n\n                // FIXME: Alterar xml causa incompatibilidade\n                try {\n                    strX = (String) tr.getTransferData(DataFlavor.stringFlavor);\n                    System.out.println(\"Importand XML Tar. Cont: \" + strX);\n\n                    ConversXML cd = new ConversXMLD();\n                    List<Object> gt = cd.leGrupoETars(new ByteArrayInputStream(strX.trim().getBytes()));\n                    System.out.println(\"Gr ou T lidos: \" + gt.size());\n                    // TODO: Melhorar\n                    if (t.isDrop()) {\n                        // JList.DropLocation ld = (JList.DropLocation) t.getDropLocation();\n                        // int idx = ld.getIndex();\n                        // System.out.println(\"Iserir: \" + ld.isInsert());\n                        // if (!ld.) {\n                        // GrupoTarefas gi = modGt.getElementAt(idx);\n                        System.out.println(\"Adicionando em grupo ins\");\n                        // grupInserir.add(tarX);\n                        // modeloArv.insertNodeInto(new DefaultMutableTreeNode(tarX), noGrin, 0);\n                        // gerg.atuG(gi);\n                        // }\n                    }\n\n                    // selec.add(tarX);\n                    gt.forEach((o) -> {\n                        modeloArv.insere(grupInserir, o);\n                    });\n                } catch (UnsupportedFlavorException | IOException | DOMException | NumberFormatException ex) {\n                    JOptionPane.showMessageDialog(view, \"Problema ao soltar\");\n\n                }\n            }\n\n            // System.out.println(\"Atualizando grupo inserir.\");\n            System.out.println(\"Flushando após importar\");\n            // OBS: Flush pode falahar mas dados vao para a tela.\n            daoUsuario.flush();\n\n            System.out.println(\"Após flush\");\n            // gerg.atuG(grupInserir)\n            // XXX OBS Parece que não estava retornando true por causa de erro em flush e\n            // não estv chamndo exp done e\n            // removendo.\n\n            return true;\n        }\n\n        /**\n         * Dever? verificar se a ?rvore poder? importar uma coisa arrastada.\n         *\n         * @param support\n         * @return\n         */\n        @Override\n        public boolean canImport(TransferHandler.TransferSupport support) {\n            System.out.println(\"pode imp?\");\n            boolean podeIm = false;\n            // A ?rvore pode importar uma tarefa\n            if (support.isDataFlavorSupported(\n                    Tarefa.TAREFA_FLAVOR) /*\n                                           * || support.isDataFlavorSupported(br.diego.gertarefas.core.Tarefa.\n                                           * SABOR_TAREFA_AN)\n                     */) {\n                podeIm = true;\n            } else if (support.isDataFlavorSupported(DataFlavor.stringFlavor)) {\n                podeIm = true;\n            }\n            return podeIm;\n        }\n\n        @Override\n        protected void exportDone(JComponent source, Transferable data, int action) {\n            if (action == MOVE) {\n                System.out.println(\"Export mov con\");\n                if (selecoesMovi != null) {\n                    for (TreePath mov : selecoesMovi) {\n                        System.out.println(\"removendo objeto movido\");\n\n                        Object o = mov.getLastPathComponent();// .getUserObject();\n                        GrupoTarefas gp;\n                        if (o instanceof GrupoTarefas) {\n                            GrupoTarefas instG = (GrupoTarefas) o;\n                            gp = instG.getPai();\n                            if (gp != null) {\n                                // instG.setDono(null);\n                                modeloArv.remove(gp, instG);\n                                // instG.getPai().remove(instG);\n                                // Dever? causar remo? orf?o.\n                                // TODO: Remover da ?rvore.\n                                // Obs: parece bom criar um modelo arv com grupos para remover junt\n                            }\n                        } else if (o instanceof TarefaComposta) {\n                            /// DefaultMutableTreeNode noP = (DefaultMutableTreeNode) no.getParent();\n                            // if (noP.equals(noPrinc)) {\n                            // usuario.getGrupoRaiz().getTarefas().remove((TarefaComposta) o);\n                            // } else {\n                            gp = ((TarefaComposta) o).getPai();// noP.getUserObject();\n                            if (gp instanceof GrupoTarefas) {\n                                // GrupoTarefas grP = (GrupoTarefas) gP;\n                                modeloArv.remove(gp, o);\n                            }\n                            // }\n                        }\n                    }\n                    daoUsuario.flush();\n                }\n            } else {\n                System.out.println(\"Não foi mover\");\n            }\n        }\n\n        @Override\n        protected Transferable createTransferable(JComponent c) {\n            // TODO: Adaptar para arrastar grupos e tarefas tamb?m\n            // GrupoTarefas g = listaGrupos.getSelectedValue();\n            TreePath[] selecoes = arvoreTarefas.getSelectionPaths();\n            // TODO: Obter\n\n            List<GrupoTarefas> gruposS = new ArrayList<>();\n\n            // TODO: Expo tarefa tamb\n            List<Tarefa> tarefas = new ArrayList<>();\n            for (TreePath ca : selecoes) {\n                // ul = (DefaultMutableTreeNode) ca.getLastPathComponent();\n                Object ou = ca.getLastPathComponent();// ul.getUserObject();\n                LOG_CONTR_PRINC.debug(\"Obje exp:\" + ou);\n                if (ou instanceof GrupoTarefas) {\n                    gruposS.add((GrupoTarefas) ou);\n                } else if (ou instanceof Tarefa) {\n                    LOG_CONTR_PRINC.debug(\"Tarefa exp\");\n                    tarefas.add((Tarefa) ou);\n                }\n            }\n\n            // XXX: ideia criar metodos de convers?o/leitura de grupos e tarefas de xml\n            TransfXMLT trsX = new TransfXMLT(DataFlavor.stringFlavor);\n\n            ConversXML cx = new ConversXMLD();\n            String xml = cx.geraXML(gruposS, tarefas);// saiB.toString();\n\n            trsX.setDadTransXML(xml);\n            this.selecoesMovi = selecoes;// .movidos = gruposS;\n\n            return trsX;\n        }\n    }\n\n    /**\n     * Para ordenar tarefas por ord de prio\n     */\n    public static class ComparaTarPrio implements Comparator<Tarefa> {\n\n        @Override\n        public int compare(Tarefa tar1, Tarefa tar2) {\n\n            // System.out.println(\"comp: \" + tar1.getTitulo() + \" \" + tar1.getPrioridade() +\n            // \" \" + tar2.getTitulo() + \" \" + tar2.getPrioridade());\n\n            /*\n             * Os itens considerados maiores ficam no fim da lista e os menores no início,\n             * por isso deve ser bom que os de maiores prioridades devem ser considerados\n             * menores\n             */\n            return tar2.getPrioridade().compareTo(tar1.getPrioridade());\n        }\n    }\n\n    /**\n     * Para ordenar tarefas por ord de prio\n     */\n    public static class ComparaGruposPrio implements Comparator<GrupoTarefas> {\n\n        @Override\n        public int compare(GrupoTarefas g1, GrupoTarefas g2) {\n            System.out.println(\"comp: \" + g1.getTitulo() + \" \" + g1.getTitulo());\n            /*\n             * Quais devem ser as estratégias para efetuar a ordenação dos grupos de acordo\n             * com prioridades? Quais são meus desejos? Desejo que os na parte de cima\n             * fiquem grupos que contenham tarefas de maior prioridade, mas parece que seria\n             * ainda mais eficiente se os gupos cujas tarefas mais prio tive mesmo valor,\n             * ficasse no topo os que tivesse mais de uma dela.\n             */\n /*\n             * Os itens considerados maiores ficam no fim da lista e os menores no início,\n             * por isso deve ser bom que os de maiores prioridades devem ser considerados\n             * menores\n             */\n            int retorno = 0;\n\n            // Deve ser necessário comparar as tarefas de cada grupo\n            List<Tarefa> tarefaG1 = g1.getTarefas();\n            List<Tarefa> tarefaG2 = g2.getTarefas();\n\n            Tarefa prioG1 = null;\n            Tarefa prioG2 = null;\n\n            if (tarefaG1.isEmpty() && tarefaG2.isEmpty()) {\n                LOG_CONTR_PRINC.info(\"Dois grupos sem tarefas.\");\n                LOG_CONTR_PRINC.trace(\"Proc nos filhos.\");\n\n                /*\n                 * Percebi que retornar zero aqui pode ser ruim. Parece que o certo seria ver se\n                 * tem tarefa em algum sub -grupo do grupo, e assim por diante, em cada grupo o\n                 * valor dele seria corr à tarefa de maior prio que fosse encontrada.\n                 */\n\n /*\n                 * Aqui parece que, se os subgrupos tivessem ordenados esse algo funcionaria\n                 * melhor, pois as de maior pri est nos prim grupos\n                 */\n                List<GrupoTarefas> gruposG1 = g1.getSubgrupos();\n                List<GrupoTarefas> gruposG2 = g1.getSubgrupos();\n\n                if (!gruposG1.isEmpty() && !gruposG2.isEmpty()) {\n                    // Busca\n\n                    for (GrupoTarefas grupoG1 : gruposG1) {\n                        if (!grupoG1.getTarefas().isEmpty()) {\n                            prioG1 = grupoG1.getTarefas().get(0);\n                            break;\n                        } else {\n                            prioG1 = procuraPrimTarefa(grupoG1);\n                            break;\n                        }\n                    }\n\n                    for (GrupoTarefas grupoG2 : gruposG2) {\n                        if (!grupoG2.getTarefas().isEmpty()) {\n                            prioG2 = grupoG2.getTarefas().get(0);\n                            break;\n                        } else {\n                            prioG2 = procuraPrimTarefa(grupoG2);\n                            break;\n                        }\n                    }\n\n                    /*\n                     * Busca por taref de sub term\n                     */\n                }\n\n            }\n\n            if (tarefaG1.isEmpty()) {\n                LOG_CONTR_PRINC.info(\"Prim sem tarefas\");\n                // Aqui dev ser proc nos filh\n\n                prioG1 = procuraPrimTarefa(g1);\n            } else if (tarefaG2.isEmpty()) {\n                prioG2 = procuraPrimTarefa(g2);\n            } else {\n                // Deve ser necessário obter-se as tarefas mais prioritarias de cada um.\n                // Inicialmente prentendo supor que elas já estão ordena por essa qual\n                prioG1 = tarefaG1.get(0);\n                prioG2 = tarefaG2.get(0);\n            }\n\n            if (prioG1 == null && prioG2 == null) {\n                return 0;\n            }\n\n            if (prioG1 != null && prioG2 == null) {\n\n                return -1;\n            }\n\n            if (prioG1 == null && prioG2 != null) {\n                return 1;\n            }\n\n            if (prioG1.getPrioridade() > prioG2.getPrioridade()) {\n                // Grupo 1 deve ser menor\n                return -1;\n            } else if (prioG1.getPrioridade() < prioG2.getPrioridade()) {\n                // Grupo 1 deve ser menor\n                retorno = 1;\n            } else {\n                retorno = 0;\n            }\n\n            return retorno;\n        }\n\n        /**\n         *\n         * @param grupo\n         * @return\n         */\n        private Tarefa procuraPrimTarefa(GrupoTarefas grupo) {\n            LOG_CONTR_PRINC.info(\"Proc tar em \" + grupo.getTitulo());\n            Tarefa tarEnc = null;\n            if (!grupo.getTarefas().isEmpty()) {\n                tarEnc = grupo.getTarefas().get(0);\n            } else {\n                // Será nec proc em subg\n                List<GrupoTarefas> grupos = grupo.getSubgrupos();\n                for (GrupoTarefas sG : grupos) {\n                    tarEnc = procuraPrimTarefa(sG);\n                    break;\n                }\n            }\n            LOG_CONTR_PRINC.info(\"Tar enc em \" + grupo.getTitulo() + \" : \" + tarEnc);\n            return tarEnc;\n        }\n\n    }\n\n    public LocalDate convertData(Date d) {\n        Instant t = d.toInstant();\n        return t.atZone(ZoneId.systemDefault()).toLocalDate();\n    }\n\n    private class AcaoExcluirGrupo extends AbstractAction {\n\n        public AcaoExcluirGrupo(Icon icone) {\n            super(\"Excluir grupo\", icone);\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            if (grupoDaAtu != null) {\n                // DefaultMutableTreeNode ngP = (DefaultMutableTreeNode) noGrupo.getParent();\n                // Remove grupo da atu do pai\n                GrupoTarefas grupoP = grupoDaAtu.getPai();\n                System.out.println(\"clic em exc gr\");\n                if (grupoP != null) {// Subgrupo\n                    System.out.println(\"Exc grupo sub: \" + grupoDaAtu + \" de \" + grupoP + \"...\");\n\n                    modeloArv.remove(grupoP, grupoDaAtu);\n                    // Obs: atu g após del de grupo func mas de tar não. 06/07/18 ~09;18\n                    daoUsuario.flush();\n                } else {\n                    // Da raiz\n\n                    // Orphan rem\n                    System.out.println(\"Exc grupo sem pai\");\n                    // grupoDaAtu.setDono(null);\n                    if (!(grupoDaAtu.equals(usuario.getGrupoRaiz()))) {\n                        gerg.deleta(grupoDaAtu);\n                    } else {\n                        System.out.println(\"Tentou excluir grupo raiz\");\n                    }\n\n                }\n                // OBs-29/07/18-09:00: flush deve remover grupo sem pai\n            }\n        }\n    }\n\n    private class AcaoAtalho extends AbstractAction {\n\n        public AcaoAtalho() {\n            super(\"Criar atalho\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            // int reto = seletorArquivos.showSaveDialog(JanelaPrincipal.this);\n            String home = System.getProperty(\"user.home\");\n            System.out.println(\"Home: \" + home);\n            // PENDING: Terminar\n            // OBS: Area t\n        }\n\n    }\n\n    public class AcaoExcluirTudo extends AbstractAction {\n\n        public AcaoExcluirTudo(Icon ic) {\n            super(\"Excluir tudo\", ic);\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            DialogoConfirmarExcTudo dialogoConf = new DialogoConfirmarExcTudo(view);\n\n            dialogoConf.setVisible(true);\n\n            int st = dialogoConf.getReturnStatus();\n\n            if (st == DialogoConfirmarExcTudo.RET_OK) {\n                if (dialogoConf.getCheckSim().isSelected()) {\n                    if (dialogoConf.getCheckBackup().isSelected()) {\n                        daoUsuario.fazBackupB();\n                    }\n                    modeloArv.removeTudo();\n\n                }\n            }\n\n        }\n    }\n\n    private class AcaoRecortar extends AbstractAction {\n\n        public AcaoRecortar() {\n            super(\"Recortar\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            TransferHandler.getCutAction()\n                    .actionPerformed(new ActionEvent(arvoreTarefas, ActionEvent.ACTION_PERFORMED, \"cut\"));\n        }\n\n    }\n\n    private class AcaoColar extends AbstractAction {\n\n        public AcaoColar() {\n            super(\"Colar\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            TransferHandler.getPasteAction()\n                    .actionPerformed(new ActionEvent(arvoreTarefas, ActionEvent.ACTION_PERFORMED, \"paste\"));\n        }\n\n    }\n\n    private class AcaoCopiar extends AbstractAction {\n\n        public AcaoCopiar() {\n            super(\"Copiar\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            TransferHandler.getCopyAction()\n                    .actionPerformed(new ActionEvent(arvoreTarefas, ActionEvent.ACTION_PERFORMED, \"copy\"));\n        }\n\n    }\n\n    private class AdicCam extends AbstractAction {\n\n        public AdicCam() {\n            super(\"Adicionar\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            modeloTabela.novaCoordenada();\n        }\n    }\n\n    /**\n     *\n     */\n    private class AcaoBackup extends AbstractAction {\n\n        public AcaoBackup() {\n            super(\"Fazer backup banco\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            // TODO: Executar sql bakup com execupdate\n            daoUsuario.fazBackupB();\n        }\n\n    }\n\n    // Fim ações//\n    /**\n     *\n     * @param grupo\n     * @param destino\n     */\n    private void copiaTarefas(GrupoTarefas grupo, List<Tarefa> destino) {\n        // Adiciona tarefas nele\n        destino.addAll(grupo.getTarefas());\n\n        // Adiciona de filhos\n        List<GrupoTarefas> subGr = grupo.getSubgrupos();\n        subGr.forEach((gr) -> {\n            copiaTarefas(gr, destino);\n        });\n    }\n\n    private boolean mostraConfirma\\u00e7\\u00e3o(String titulo, String mensagem) {\n        return JOptionPane.showConfirmDialog(view, mensagem, titulo, JOptionPane.YES_NO_OPTION) == 0;\n    }\n\n    /**\n     * Exibe a tela de login\n     */\n    private void permiss\\u00e3oECarrega() {\n        dialogoLogin.setVisible(true);\n    }\n\n    public Usuario getUsuario() {\n        return usuario;\n    }\n\n    private void agendaAl(Tarefa t) {\n        LocalDateTime dataHL = t.getDataHoraLembrete();\n        Instant ins = dataHL.toInstant(ZoneOffset.of(\"-3\"));\n\n        Date dataNot = Date.from(ins);\n\n        TimerTask tarefaAl = new TimerTask() {\n            @Override\n            public void run() {\n                iconeGeretar.displayMessage(\"Tarefa\", t.getTitulo(), TrayIcon.MessageType.WARNING);\n\n                JOptionPane.showMessageDialog(view, t.getTitulo(), \"Tarefa\", JOptionPane.INFORMATION_MESSAGE);\n            }\n        };\n\n        SimpleDateFormat formData = new SimpleDateFormat(\"dd/MM/yyyy kk:mm:ss\");\n        System.out.println(formData.format(dataNot));\n        timerAlarme.schedule(tarefaAl, dataNot);\n        LOG_CONTR_PRINC.debug(\"Da c: \" + dataNot);\n        LOG_CONTR_PRINC.debug(\"Da conf: \" + dataHL);\n        LOG_CONTR_PRINC.trace(\"Tar age! \");\n    }\n\n    /**\n     * Gera dados XML contendo todos os grupos e tarefas e o envia para o\n     * c?rrego especificado.\n     *\n     * @param saida\n     */\n    // XXX:Perguntar sobrescre\n    private void exportaXMLParaS(OutputStream saida) throws IOException {\n        ObjectMapper map = new XmlMapper();\n        map.registerModule(new JavaTimeModule());\n        map.registerModule(new Hibernate5Module().configure(Hibernate5Module.Feature.FORCE_LAZY_LOADING, true));\n\n        map.writeValue(saida, usuario.getGrupoRaiz());\n\n        // String tarefasComoXML = converteTodasAsTarefasParaXML();\n        // LOG_CONTR_PRINC.debug(\"XML Gerado trans s: {} \", tarefasComoXML);\n        // OutputStreamWriter writer = new OutputStreamWriter(saida,\n        // proprie.getProperty(\"encoding-exporta\",\n        // \"UTF-8\"));//\"UTF-8\");\n        // try ( //saida.write(xml.getBytes());\n        // BufferedWriter ea = new BufferedWriter(writer)) {\n        // ea.write(xml);\n        // ea.flush();\n        // }\n    }\n\n    private String converteTodasAsTarefasParaXML() {\n        ConversXMLD c = new ConversXMLD();\n        c.setCharsetSaida(proprie.getProperty(\"encoding-exporta\", \"UTF-8\"));\n        String xml = c.geraXML(usuario.getGrupoRaiz().getSubgrupos(), usuario.getGrupoRaiz().getTarefas());\n\n        return xml;\n    }\n\n    private GrupoTarefas importaGrupoRaiz(File f) {\n        ObjectMapper map = new XmlMapper();\n        map.registerModule(new JavaTimeModule());\n        map.registerModule(new Hibernate5Module().configure(Hibernate5Module.Feature.FORCE_LAZY_LOADING, true));\n\n        GrupoTarefas grupoRaiz;\n\n        try {\n            grupoRaiz = map.readValue(f, GrupoTarefas.class);\n\n        } catch (IOException ex) {\n            java.util.logging.Logger.getLogger(JanPrinMatController.class.getName()).log(Level.SEVERE, null, ex);\n\n            return null;\n        }\n\n        return grupoRaiz;\n    }\n\n    private void salvaDadosLidosUsandoDOM(File ar) {\n        List<Object> gt = importaXMLComDOM(ar);\n\n        LOG_CONTR_PRINC.debug(\"Adicionando no usu {} itens lidos...\", gt.size());\n\n        gt.forEach((Object o) -> {\n            if (o instanceof GrupoTarefas) {\n                GrupoTarefas gl = (GrupoTarefas) o;\n                // Add para alterar pai\n                modeloArv.insere(usuario.getGrupoRaiz(), gl);\n            } else if (o instanceof Tarefa) {\n                System.out.println(\"Taref enc im\");\n                // Add de GrupT para alterar pai\n                modeloArv.insere(usuario.getGrupoRaiz(), o);\n            }\n        });\n    }\n\n    /**\n     *\n     * @param f\n     * @return\n     */\n    private List<Object> importaXMLComDOM(File f) {\n        ConversXMLD cx = new ConversXMLD();\n        cx.setCharsetEntrada(proprie.getProperty(\"encoding-importacao\", \"UTF-8\"));\n        FileInputStream en = null;\n        try {\n            en = new FileInputStream(arquivoEs);\n        } catch (FileNotFoundException ex) {\n            LOG_CONTR_PRINC.catching(ex);\n        }\n        System.out.println(\"Interpretando...\");\n        List<Object> gt = cx.leGrupoETars(en);\n        return gt;\n    }\n\n    private String recebeStringData() {\n        Calendar ca = Calendar.getInstance();\n\n        StringBuilder controiDataAtual = new StringBuilder();\n        controiDataAtual.append(ca.get(Calendar.DAY_OF_MONTH));\n        controiDataAtual.append(ca.get(Calendar.MONTH));\n        controiDataAtual.append(ca.get(Calendar.YEAR));\n        controiDataAtual.append(\"-\").append(ca.get(Calendar.HOUR_OF_DAY)).append(ca.get(Calendar.MINUTE));\n\n        return controiDataAtual.toString();\n    }\n\n    /**\n     *\n     * @param mantem\n     * @throws java.io.IOException\n     */\n    public void fazLogin(boolean mantem) throws IOException {\n        LOG_CONTR_PRINC.traceEntry();\n        // Combina??o de nome e senha\n        usuario = dialogoLogin.getUsuario();\n\n        // N?o permite login se n?o tem usu?rio\n        if (daoUsuario.receUPorH(usuario.getNome(), usuario.getEmb()) == null) {\n            LOG_CONTR_PRINC.error(\"Usu?rio n?o encontrado\");\n            return;\n        }\n\n        gerg.setUsu(usuario);\n\n        // db = new BancoDadosTarefas(usuario);\n        if (mantem) {\n            // Mant?m login\n            this.proprie.setProperty(\"manter\", \"true\");\n            proprie.setProperty(\"usuario\", usuario.getNome());\n            proprie.setProperty(\"hash\", usuario.getEmb());\n            gravaProp();\n        } else {\n            this.proprie.setProperty(\"manter\", \"false\");\n            proprie.setProperty(\"hash\", \"\");\n            gravaProp();\n        }\n        dialogoLogin.limpa();\n        dialogoLogin.dispose();\n\n        LOG_CONTR_PRINC.trace(\"Exibindo grupos...\");\n        exibeGrupos();\n\n        LOG_CONTR_PRINC.traceExit();\n    }\n\n    private int contaTotalFazer(GrupoTarefas gr) {\n        List<GrupoTarefas> subg = gr.getSubgrupos();\n        List<Tarefa> grupTars = gr.getTarefas();\n        int totF = 0;\n\n        if (subg != null) {\n            // TODO: Por em metodo sep\n            for (GrupoTarefas g : subg) {\n                // TODO: sub e filhas\n                List<GrupoTarefas> subgB = g.getSubgrupos();\n                totF = subgB.stream().map((gf) -> contaTotalFazer(gf)).reduce(totF, Integer::sum);\n                List<Tarefa> liT = g.getTarefas();\n                totF = liT.stream().filter((t) -> (!t.isConcluida())).map((_item) -> 1).reduce(totF, Integer::sum);\n            }\n        }\n\n        // Conta tarefas\n        grupTars.stream().filter((ta) -> (ta.isConcluida())).map((ite) -> 1).reduce(totF, Integer::sum);\n        return totF;\n    }\n\n    private void fazMigraçãoBanco() {\n\n    }\n\n    private class AcaoDiminuiPrio extends AbstractAction {\n\n        public AcaoDiminuiPrio() {\n            super(\"Diminui prio\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n//            int linhaSel = view.getPainelLista().getTabelaTarefas().getSelectedRow();\n//            if (linhaSel == -1) {\n//                return;\n//            }\n//            int idxMod = view.getPainelLista().getTabelaTarefas().convertRowIndexToModel(linhaSel);\n//            Tarefa tarSel = modeloTab.getTarefas().get(idxMod);\n//            tarSel.setPrioridade(tarSel.getPrioridade() - 1);\n//            ordenadorTabelaLista.sort();\n        }\n    }\n\n    private class AcaoAumentaPrio extends AbstractAction {\n\n        public AcaoAumentaPrio() {\n            super(\"Aumenta prio\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n//            int linhaSel = view.getPainelLista().getTabelaTarefas().getSelectedRow();\n//            if (linhaSel == -1) {\n//                return;\n//            }\n//            int idxMod = view.getPainelLista().getTabelaTarefas().convertRowIndexToModel(linhaSel);\n//            Tarefa tarSel = modeloTab.getTarefas().get(idxMod);\n//            tarSel.setPrioridade(tarSel.getPrioridade() + 1);\n//            tarSel.setDataModif(LocalDateTime.now());\n//            ordenadorTabelaLista.sort();\n        }\n    }\n\n    private class AcaoBuscar extends AbstractAction {\n\n        public AcaoBuscar() {\n            super(\"Buscar\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n//            PainelListaTarefas painelLista = view.getPainelLista();\n//            String termo = painelLista.getCampoTextoBusca().getText();\n//            filtraTarefasLPorTit(termo, false);\n        }\n    }\n\n    private class AcaoFiltrarTarefas extends AbstractAction {\n\n        public AcaoFiltrarTarefas() {\n            super(\"Filtrar\");\n        }\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            PainelListaTarefas painLT = null;// = view.getPainelLista();\n\n            LocalDate dataAg = null;\n            if (painLT.getCheckDataAgend().isSelected()) {\n                if (painLT.getRbHoje().isSelected()) {\n                    dataAg = LocalDate.now();\n                } else if (painLT.getRbFiltroAma().isSelected()) {\n                    dataAg = LocalDate.now().plusDays(1);\n                } else if (painLT.getRbDataEsp().isSelected()) {\n                    dataAg = painLT.getCampoDataAgFil().getModeloDef().getValue();\n                }\n\n                // TODO: Adic campo\n            }\n\n            boolean apVenc = painLT.getCheckApenasVencidas().isSelected();\n\n            filtraTarefasL(dataAg, apVenc);\n        }\n    }\n\n    private void filtraTarefasL(LocalDate dataAg, boolean apVenc) {\n        // TODO OBS Esse proc parece lento\n        List<Tarefa> todasAsTar = obtemTodasAsTar();\n\n        Stream<Tarefa> st = todasAsTar.stream();\n\n        if (dataAg != null) {\n            st = st.filter(t -> (t.getDataFazer() != null) && t.getDataFazer().equals(dataAg));\n        }\n\n        if (apVenc) {\n            st = st.filter(t -> t.getDataFazer() != null && t.getDataFazer().isBefore(LocalDate.now()));\n        }\n\n        modeloTab.setTarefas(st.collect(Collectors.toList()));\n\n        ordenadorTabelaLista.sort();\n    }\n\n    /**\n     *\n     * @param termo\n     * @param apVenc\n     */\n    private void filtraTarefasLPorTit(String termo, boolean naoFeitas) {\n        // TODO OBS Esse proc parece lento\n        List<Tarefa> todasAsTar = obtemTodasAsTar();\n\n        Stream<Tarefa> st = todasAsTar.stream();\n\n        st = st.filter(t -> t.getTitulo().toLowerCase().contains(termo.toLowerCase()));\n\n        if (naoFeitas) {\n            st = st.filter(t -> t.isConcluida() == false);\n        }\n\n        modeloTab.setTarefas(st.collect(Collectors.toList()));\n\n        ordenadorTabelaLista.sort();\n    }\n\n    public ModeloTabAgend getModAg() {\n        return modAg;\n    }\n\n    public TableRowSorter getOrdenadorTabelaLista() {\n        return ordenadorTabelaLista;\n    }\n\n}\n"
        }
    ]
}