{
    "sourceFile": "src/main/java/br/com/antoniodiego/gertarefas/util/TarefaService.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1751341873296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1751341873296,
            "name": "Commit-0",
            "content": "/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\n */\npackage br.com.antoniodiego.gertarefas.util;\n\nimport java.util.List;\n\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.hibernate.Session;\n\nimport br.com.antoniodiego.gertarefas.persist.DAOTarefa;\nimport br.com.antoniodiego.gertarefas.pojo.Tarefa;\n\n/**\n *\n * @author Antônio Diego <antoniodiegoluz at gmail.com>\n */\npublic class TarefaService {\n\n    /**\n     *\n     */\n    public static final Logger LOG_PAINEL_T = LogManager.getLogger(\"funcoes\");\n\n    public TarefaService() {\n        super();\n    }\n\n    /**\n     * Não persistea a alteração na tarefa movida\n     *\n     * @param t\n     * @param posicao\n     */\n    public static void alteraPosicao(Tarefa t, int posicao) {\n        LOG_PAINEL_T.traceEntry(\"Alterando posição\");\n\n        Integer posAnt = t.getPosicao();\n        DAOTarefa daoT = new DAOTarefa();\n\n        /*\n         * Pega tarefa atualmente na posição\n         */\n        Tarefa tarefaPos = daoT.getByPosicao(posicao);\n        if (tarefaPos != null) {\n            LOG_PAINEL_T.debug(\"Posição ocupada por: \" + tarefaPos.getTitulo());\n\n            // Posição já ocupada\n            if (posicao < posAnt) {\n                LOG_PAINEL_T.debug(\"Nova posição acima da atual\");\n                // Posição nova é mais acima que a atual\n\n                // Move a nova tarefa pro final\n                Integer maiorP = daoT.getMaiorPosicao();\n                LOG_PAINEL_T.debug(\"Movendo para o final... {}\", maiorP + 1);\n                t.setPosicao(maiorP + 1);\n                daoT.atualiza(t);\n\n                // Desvia tarefas para baixo da posição anterior pra cima\n                LOG_PAINEL_T.debug(\"Movendo para baixo de {} a \", posAnt - 1,\n                        posicao);\n                deslocaTarefasBaixo(posAnt - 1, posicao);\n\n                LOG_PAINEL_T.debug(\"Alterando posição para {}\", posicao);\n                t.setPosicao(posicao);\n            } else {\n                LOG_PAINEL_T.trace(\"Mover tarefa para baixo\");\n\n            }\n        } else {\n            t.setPosicao(posicao);\n        }\n    }\n\n    /**\n     * Desloca posição de intervalo de tarefas para baixo no intervalo\n     *\n     * @param posicaoUltima posição tarefas mais abaixo, de onde deve ser\n     * começado o desvio para baixo\n     * @param posicaoCima Posição da tarefa no topo, que deve descer\n     */\n    public static void deslocaTarefasBaixo(int posicaoUltima, int posicaoCima) {\n\n        deslocaTarefasBaixoV2(posicaoUltima, posicaoCima);\n        // long currentMillis = System.currentTimeMillis();\n\n        // DAOTarefa daoT = new DAOTarefa();\n        // Tarefa tarP;\n        // Session sessao = DAOTarefa.getSession();\n        // sessao.beginTransaction();\n        // for (int i = posicaoUltima; i >= posicaoCima; i--) {\n        // tarP = daoT.getByPosicaoS(i);\n        // if (tarP != null) {\n        // tarP.setPosicao(i + 1);\n        // sessao.update(tarP);\n        // // daoT.atualiza(tarP);\n        // }\n        // }\n        // sessao.getTransaction().commit();\n        // long instanteFinal = System.currentTimeMillis();\n        // ;\n        // long duracaoDeslocamento = instanteFinal - currentMillis;\n        // LOG_NOVA_TAREFA.debug(\"Deslocamento levou: {}\", duracaoDeslocamento);\n        // LOG_NOVA_TAREFA.debug(\"Deslocamento levou: {}\", duracaoDeslocamento / 1000);\n    }\n\n    public static void deslocaTarefasBaixoImp1(int posicaoUltima, int posicaoCima) {\n\n        long currentMillis = System.currentTimeMillis();\n\n        DAOTarefa daoT = new DAOTarefa();\n        Tarefa tarP;\n        Session sessao = DAOTarefa.getSession();\n        sessao.beginTransaction();\n        for (int i = posicaoUltima; i >= posicaoCima; i--) {\n\n            tarP = daoT.getByPosicaoS(i);\n\n            if (tarP != null) {\n                tarP.setPosicao(i + 1);\n                sessao.update(tarP);\n                // daoT.atualiza(tarP);\n            }\n        }\n        sessao.getTransaction().commit();\n\n        long instanteFinal = System.currentTimeMillis();\n        ;\n\n        long duracaoDeslocamento = instanteFinal - currentMillis;\n\n        LOG_PAINEL_T.debug(\"Deslocamento levou: {}\", duracaoDeslocamento);\n        LOG_PAINEL_T.debug(\"Deslocamento levou: {}\", duracaoDeslocamento / 1000);\n    }\n\n    /**\n     * Desloca posição de intervalo de tarefas para baixo no intervalo\n     *\n     * Otimizado para não fazer muitas consultas no banco.\n     *\n     * Ele faz todas as alt na memória e depois atualiza\n     *\n     * @param posicaoUltima posição tarefas mais abaixo, de onde deve ser\n     * começado o desvio para baixo\n     * @param posicaoCima Posição da tarefa no topo, que deve descer\n     */\n    public static void deslocaTarefasBaixoV2(int posicaoUltima, int posicaoCima) {\n        LOG_PAINEL_T.traceEntry(\"Posicao ult: {}. Pos cima: {}\", posicaoUltima, posicaoCima);\n\n        long currentMillis = System.currentTimeMillis();\n\n        DAOTarefa daoT = new DAOTarefa();\n        Tarefa tarP;\n        // Session sessao = DAOTarefa.getSession();\n\n        List<Tarefa> todas = daoT.listaTodas();\n        for (int i = posicaoUltima; i >= posicaoCima; i--) {\n\n            //  LOG_PAINEL_T.debug(\"Pegando: {}\", i);\n            tarP = getByPosicao(todas, i);\n\n            if (tarP != null) {\n                //    LOG_PAINEL_T.debug(\"Movendo: {}\", i + 1);\n                tarP.setPosicao(i + 1);\n                //LOG_PAINEL_T.debug(\"Update\");\n                // sessao.update(tarP);\n                daoT.atualiza(tarP);\n            }\n        }\n        // sessao.getTransaction().commit();\n\n        long instanteFinal = System.currentTimeMillis();\n\n        long duracaoDeslocamento = instanteFinal - currentMillis;\n\n        LOG_PAINEL_T.debug(\"Deslocamento levou: {}\", duracaoDeslocamento);\n        LOG_PAINEL_T.debug(\"Deslocamento levou: {}\", duracaoDeslocamento / 1000);\n    }\n\n    private static Tarefa getByPosicao(List<Tarefa> tarefas, int posicao) {\n        for (Tarefa t : tarefas) {\n            if (t.getPosicao() == posicao) {\n                return t;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Desloca posição de intervalo de tarefas para baixo no intervalo\n     * [posicaoCima,maiorPosicao]\n     *\n     * @param posicaoCima Posição da tarefa no topo, que deve descer\n     */\n    public static void deslocaTarefasBaixo(int posicaoCima) {\n        DAOTarefa daoT = new DAOTarefa();\n        deslocaTarefasBaixo(daoT.getMaiorPosicao(), posicaoCima);\n    }\n}\n"
        }
    ]
}